
RetroAdapterV2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  00000b46  00000bda  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b46  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004e  00800124  00800124  00000bfe  2**0
                  ALLOC
  3 .debug_aranges 00000080  00000000  00000000  00000c00  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000357  00000000  00000000  00000c80  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f57  00000000  00000000  00000fd7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005df  00000000  00000000  00001f2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b00  00000000  00000000  0000250d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  00003010  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000061b  00000000  00000000  000030f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000008b5  00000000  00000000  0000370b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000108  00000000  00000000  00003fc0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 75 00 	jmp	0xea	; 0xea <__ctors_end>
   4:	0c 94 80 04 	jmp	0x900	; 0x900 <__vector_1>
   8:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
   c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  10:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  14:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  18:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  1c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  20:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  24:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  28:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  2c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  30:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  34:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  38:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  3c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  40:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  44:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  48:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  4c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  50:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  54:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  58:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  5c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  60:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  64:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>

00000068 <usbDescriptorStringDeviceDefault>:
  68:	1e 03 41 00 72 00 63 00 61 00 64 00 65 00 20 00     ..A.r.c.a.d.e. .
  78:	41 00 64 00 61 00 70 00 74 00 65 00 72 00           A.d.a.p.t.e.r.

00000086 <usbDescriptorDeviceJoystick>:
  86:	12 01 10 01 00 00 00 08 c0 16 dc 27 01 00 01 02     ...........'....
  96:	00 01                                               ..

00000098 <usbHidReportDescriptor1P>:
  98:	05 01 09 05 a1 01 85 01 a1 00 05 09 19 01 29 0e     ..............).
  a8:	15 00 25 01 95 0e 75 01 81 02 75 02 95 01 81 01     ..%...u...u.....
  b8:	05 01 09 30 09 31 15 80 25 7f 75 08 95 02 81 02     ...0.1..%.u.....
  c8:	c0 c0                                               ..

000000ca <hat_lut>:
  ca:	ff 00 04 ff 06 07 05 ff 02 01 03 ff ff ff ff ff     ................

000000da <usbDescriptorString0>:
  da:	04 03 09 04                                         ....

000000de <usbDescriptorStringVendor>:
  de:	0c 03 67 00 61 00 47 00 47 00 69 00                 ..g.a.G.G.i.

000000ea <__ctors_end>:
  ea:	11 24       	eor	r1, r1
  ec:	1f be       	out	0x3f, r1	; 63
  ee:	cf ef       	ldi	r28, 0xFF	; 255
  f0:	d4 e0       	ldi	r29, 0x04	; 4
  f2:	de bf       	out	0x3e, r29	; 62
  f4:	cd bf       	out	0x3d, r28	; 61

000000f6 <__do_copy_data>:
  f6:	11 e0       	ldi	r17, 0x01	; 1
  f8:	a0 e0       	ldi	r26, 0x00	; 0
  fa:	b1 e0       	ldi	r27, 0x01	; 1
  fc:	e6 e4       	ldi	r30, 0x46	; 70
  fe:	fb e0       	ldi	r31, 0x0B	; 11
 100:	02 c0       	rjmp	.+4      	; 0x106 <.do_copy_data_start>

00000102 <.do_copy_data_loop>:
 102:	05 90       	lpm	r0, Z+
 104:	0d 92       	st	X+, r0

00000106 <.do_copy_data_start>:
 106:	a4 32       	cpi	r26, 0x24	; 36
 108:	b1 07       	cpc	r27, r17
 10a:	d9 f7       	brne	.-10     	; 0x102 <.do_copy_data_loop>

0000010c <__do_clear_bss>:
 10c:	11 e0       	ldi	r17, 0x01	; 1
 10e:	a4 e2       	ldi	r26, 0x24	; 36
 110:	b1 e0       	ldi	r27, 0x01	; 1
 112:	01 c0       	rjmp	.+2      	; 0x116 <.do_clear_bss_start>

00000114 <.do_clear_bss_loop>:
 114:	1d 92       	st	X+, r1

00000116 <.do_clear_bss_start>:
 116:	a2 37       	cpi	r26, 0x72	; 114
 118:	b1 07       	cpc	r27, r17
 11a:	e1 f7       	brne	.-8      	; 0x114 <.do_clear_bss_loop>
 11c:	0e 94 e6 01 	call	0x3cc	; 0x3cc <main>
 120:	0c 94 a1 05 	jmp	0xb42	; 0xb42 <_exit>

00000124 <__bad_interrupt>:
 124:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000128 <HardwareInit>:

void HardwareInit()
{
	// See schmatic for connections

	DDRB	= 0b00000000;
 128:	14 b8       	out	0x04, r1	; 4
	PORTB	= 0b00111111;	// All inputs with pull-ups except xtal
 12a:	8f e3       	ldi	r24, 0x3F	; 63
 12c:	85 b9       	out	0x05, r24	; 5

	DDRC	= 0b00000000;
 12e:	17 b8       	out	0x07, r1	; 7
	PORTC	= 0b00111111;	// All inputs except unused bits
 130:	88 b9       	out	0x08, r24	; 8

	DDRD	= 0b00000000;
 132:	1a b8       	out	0x0a, r1	; 10
	PORTD	= 0b11111001;	// All inputs with pull-ups except USB D+/D-	
 134:	89 ef       	ldi	r24, 0xF9	; 249
 136:	8b b9       	out	0x0b, r24	; 11
	
}
 138:	08 95       	ret

0000013a <SetHIDMode>:

/* ------------------------------------------------------------------------- */

void SetHIDMode()
{
	usbDeviceDescriptorAddress = usbDescriptorDeviceJoystick;
 13a:	86 e8       	ldi	r24, 0x86	; 134
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	90 93 25 01 	sts	0x0125, r25
 142:	80 93 24 01 	sts	0x0124, r24
	usbDeviceDescriptorLength = sizeof(usbDescriptorDeviceJoystick);
 146:	82 e1       	ldi	r24, 0x12	; 18
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	90 93 27 01 	sts	0x0127, r25
 14e:	80 93 26 01 	sts	0x0126, r24
	hidReportDescriptorAddress = usbHidReportDescriptor1P;
 152:	88 e9       	ldi	r24, 0x98	; 152
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	90 93 37 01 	sts	0x0137, r25
 15a:	80 93 36 01 	sts	0x0136, r24
	hidReportDescriptorLength = sizeof(usbHidReportDescriptor1P);
 15e:	82 e3       	ldi	r24, 0x32	; 50
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	90 93 39 01 	sts	0x0139, r25
 166:	80 93 38 01 	sts	0x0138, r24
	hidNumReports = 1;
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	80 93 2e 01 	sts	0x012E, r24
	reportBufferAddress = &reportBuffer;
 170:	88 e2       	ldi	r24, 0x28	; 40
 172:	91 e0       	ldi	r25, 0x01	; 1
 174:	90 93 31 01 	sts	0x0131, r25
 178:	80 93 30 01 	sts	0x0130, r24
	reportBufferLength = sizeof(reportBuffer);
 17c:	85 e0       	ldi	r24, 0x05	; 5
 17e:	80 93 32 01 	sts	0x0132, r24
	usbDescriptorStringDeviceAddress = usbDescriptorStringDeviceDefault;
 182:	88 e6       	ldi	r24, 0x68	; 104
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	90 93 34 01 	sts	0x0134, r25
 18a:	80 93 33 01 	sts	0x0133, r24
	usbDescriptorStringDeviceLength = sizeof(usbDescriptorStringDeviceDefault);
 18e:	8e e1       	ldi	r24, 0x1E	; 30
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	90 93 3b 01 	sts	0x013B, r25
 196:	80 93 3a 01 	sts	0x013A, r24
	
	usbDescriptorConfiguration[25] = hidReportDescriptorLength;
 19a:	82 e3       	ldi	r24, 0x32	; 50
 19c:	80 93 19 01 	sts	0x0119, r24

	cli();						// disable interrupts
 1a0:	f8 94       	cli
    usbDeviceDisconnect();
 1a2:	ea e2       	ldi	r30, 0x2A	; 42
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	80 81       	ld	r24, Z
 1a8:	82 60       	ori	r24, 0x02	; 2
 1aa:	80 83       	st	Z, r24
	DDRD |= (1<<1) | (1<<2);	// USB reset
 1ac:	80 81       	ld	r24, Z
 1ae:	86 60       	ori	r24, 0x06	; 6
 1b0:	80 83       	st	Z, r24
 1b2:	26 ef       	ldi	r18, 0xF6	; 246
 1b4:	39 e0       	ldi	r19, 0x09	; 9
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1b6:	40 e9       	ldi	r20, 0x90	; 144
 1b8:	51 e0       	ldi	r21, 0x01	; 1
 1ba:	ca 01       	movw	r24, r20
 1bc:	01 97       	sbiw	r24, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <SetHIDMode+0x82>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1c0:	21 50       	subi	r18, 0x01	; 1
 1c2:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1c4:	d1 f7       	brne	.-12     	; 0x1ba <SetHIDMode+0x80>

	_delay_ms(255);				// disconnect for >250ms

    usbDeviceConnect();
 1c6:	ea e2       	ldi	r30, 0x2A	; 42
 1c8:	f0 e0       	ldi	r31, 0x00	; 0
 1ca:	80 81       	ld	r24, Z
 1cc:	8d 7f       	andi	r24, 0xFD	; 253
 1ce:	80 83       	st	Z, r24
	DDRD &= ~((1<<1) | (1<<2));	// clear reset
 1d0:	80 81       	ld	r24, Z
 1d2:	89 7f       	andi	r24, 0xF9	; 249
 1d4:	80 83       	st	Z, r24
	sei();						// restart interrupts
 1d6:	78 94       	sei
}
 1d8:	08 95       	ret

000001da <usbFunctionSetup>:

/* ------------------------------------------------------------------------- */

usbMsgLen_t usbFunctionSetup(uchar data[8])
{
usbRequest_t    *rq = (void *)data;
 1da:	fc 01       	movw	r30, r24

    /* The following requests are never used. But since they are required by
     * the specification, we implement them in this example.
     */
    if((rq->bmRequestType & USBRQ_TYPE_MASK) == USBRQ_TYPE_CLASS){
 1dc:	80 81       	ld	r24, Z
 1de:	80 76       	andi	r24, 0x60	; 96
 1e0:	80 32       	cpi	r24, 0x20	; 32
 1e2:	f9 f4       	brne	.+62     	; 0x222 <usbFunctionSetup+0x48>
		/* class request type */
        if(rq->bRequest == USBRQ_HID_GET_REPORT){
 1e4:	81 81       	ldd	r24, Z+1	; 0x01
 1e6:	81 30       	cpi	r24, 0x01	; 1
 1e8:	59 f4       	brne	.+22     	; 0x200 <usbFunctionSetup+0x26>
			/* wValue: ReportType (highbyte), ReportID (lowbyte) */
            /* we only have one report type, so don't look at wValue */
			//ReadJoystick(rq->wValue.bytes[0]);
            usbMsgPtr = reportBufferAddress; //(void *)&reportBuffer;
 1ea:	80 91 30 01 	lds	r24, 0x0130
 1ee:	90 91 31 01 	lds	r25, 0x0131
 1f2:	90 93 57 01 	sts	0x0157, r25
 1f6:	80 93 56 01 	sts	0x0156, r24
            return reportBufferLength; //sizeof(reportBuffer);
 1fa:	80 91 32 01 	lds	r24, 0x0132
 1fe:	08 95       	ret
        }else if(rq->bRequest == USBRQ_HID_GET_IDLE){
 200:	82 30       	cpi	r24, 0x02	; 2
 202:	41 f4       	brne	.+16     	; 0x214 <usbFunctionSetup+0x3a>
            usbMsgPtr = &idleRate;
 204:	8f e2       	ldi	r24, 0x2F	; 47
 206:	91 e0       	ldi	r25, 0x01	; 1
 208:	90 93 57 01 	sts	0x0157, r25
 20c:	80 93 56 01 	sts	0x0156, r24
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	08 95       	ret
            return 1;
        }else if(rq->bRequest == USBRQ_HID_SET_IDLE){
 214:	8a 30       	cpi	r24, 0x0A	; 10
 216:	29 f4       	brne	.+10     	; 0x222 <usbFunctionSetup+0x48>
            idleRate = rq->wValue.bytes[1];
 218:	83 81       	ldd	r24, Z+3	; 0x03
 21a:	80 93 2f 01 	sts	0x012F, r24
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	08 95       	ret
 222:	80 e0       	ldi	r24, 0x00	; 0
        }
    }else{
        /* no vendor specific requests implemented */
    }
    return 0;   /* default for not implemented requests: return no data back to host */
}
 224:	08 95       	ret

00000226 <usbFunctionDescriptor>:

/* ------------------------------------------------------------------------- */

uchar	usbFunctionDescriptor(struct usbRequest *rq)
{
 226:	fc 01       	movw	r30, r24
	if (rq->bRequest == USBRQ_GET_DESCRIPTOR)
 228:	81 81       	ldd	r24, Z+1	; 0x01
 22a:	86 30       	cpi	r24, 0x06	; 6
 22c:	c1 f5       	brne	.+112    	; 0x29e <usbFunctionDescriptor+0x78>
	{
		// USB spec 9.4.3, high byte is descriptor type
		switch (rq->wValue.bytes[1])
 22e:	83 81       	ldd	r24, Z+3	; 0x03
 230:	82 30       	cpi	r24, 0x02	; 2
 232:	a1 f0       	breq	.+40     	; 0x25c <usbFunctionDescriptor+0x36>
 234:	83 30       	cpi	r24, 0x03	; 3
 236:	18 f4       	brcc	.+6      	; 0x23e <usbFunctionDescriptor+0x18>
 238:	81 30       	cpi	r24, 0x01	; 1
 23a:	89 f5       	brne	.+98     	; 0x29e <usbFunctionDescriptor+0x78>
 23c:	17 c0       	rjmp	.+46     	; 0x26c <usbFunctionDescriptor+0x46>
 23e:	83 30       	cpi	r24, 0x03	; 3
 240:	01 f1       	breq	.+64     	; 0x282 <usbFunctionDescriptor+0x5c>
 242:	82 32       	cpi	r24, 0x22	; 34
 244:	61 f5       	brne	.+88     	; 0x29e <usbFunctionDescriptor+0x78>
		{
			case USBDESCR_HID_REPORT:
				usbMsgPtr = (void*)hidReportDescriptorAddress;
 246:	80 91 36 01 	lds	r24, 0x0136
 24a:	90 91 37 01 	lds	r25, 0x0137
 24e:	90 93 57 01 	sts	0x0157, r25
 252:	80 93 56 01 	sts	0x0156, r24
				return hidReportDescriptorLength;
 256:	80 91 38 01 	lds	r24, 0x0138
 25a:	08 95       	ret
			case USBDESCR_CONFIG:
				usbMsgPtr = (void*)usbDescriptorConfiguration;
 25c:	80 e0       	ldi	r24, 0x00	; 0
 25e:	91 e0       	ldi	r25, 0x01	; 1
 260:	90 93 57 01 	sts	0x0157, r25
 264:	80 93 56 01 	sts	0x0156, r24
 268:	82 e2       	ldi	r24, 0x22	; 34
 26a:	08 95       	ret
				return sizeof(usbDescriptorConfiguration);
			case USBDESCR_DEVICE:
				usbMsgPtr = usbDeviceDescriptorAddress;
 26c:	80 91 24 01 	lds	r24, 0x0124
 270:	90 91 25 01 	lds	r25, 0x0125
 274:	90 93 57 01 	sts	0x0157, r25
 278:	80 93 56 01 	sts	0x0156, r24
				return usbDeviceDescriptorLength;
 27c:	80 91 26 01 	lds	r24, 0x0126
 280:	08 95       	ret
			case USBDESCR_STRING:
				switch (rq->wValue.bytes[0])
 282:	82 81       	ldd	r24, Z+2	; 0x02
 284:	82 30       	cpi	r24, 0x02	; 2
 286:	59 f4       	brne	.+22     	; 0x29e <usbFunctionDescriptor+0x78>
				{
					case 2:
						usbMsgPtr = (void*)usbDescriptorStringDeviceAddress;
 288:	80 91 33 01 	lds	r24, 0x0133
 28c:	90 91 34 01 	lds	r25, 0x0134
 290:	90 93 57 01 	sts	0x0157, r25
 294:	80 93 56 01 	sts	0x0156, r24
						return usbDescriptorStringDeviceLength;
 298:	80 91 3a 01 	lds	r24, 0x013A
 29c:	08 95       	ret
 29e:	80 e0       	ldi	r24, 0x00	; 0
				}
		}
	}

	return 0;
}
 2a0:	08 95       	ret

000002a2 <RemapController>:

/* ------------------------------------------------------------------------- */
void RemapController(char *x, char *y, char *rx, char *ry, uchar *b1, uchar *b2)
{
 2a2:	ef 92       	push	r14
 2a4:	ff 92       	push	r15
 2a6:	0f 93       	push	r16
 2a8:	1f 93       	push	r17
 2aa:	cf 93       	push	r28
 2ac:	df 93       	push	r29
 2ae:	fc 01       	movw	r30, r24
 2b0:	db 01       	movw	r26, r22
 2b2:	e8 01       	movw	r28, r16
 2b4:	b7 01       	movw	r22, r14
	bit 4	button 13:	??
	bit 5	button 14: 	Android Left Thumb Stick Press
	bit 6	button 15: 	Android Right Thumb Stick Press
	bit 7	button 16: 	??
*/
	*x+=128;
 2b6:	80 81       	ld	r24, Z
 2b8:	80 58       	subi	r24, 0x80	; 128
 2ba:	80 83       	st	Z, r24
	*y+=128;
 2bc:	8c 91       	ld	r24, X
 2be:	80 58       	subi	r24, 0x80	; 128
 2c0:	8c 93       	st	X, r24
	*rx+=128;
 2c2:	fa 01       	movw	r30, r20
 2c4:	80 81       	ld	r24, Z
 2c6:	80 58       	subi	r24, 0x80	; 128
 2c8:	80 83       	st	Z, r24
	*ry+=128;
 2ca:	f9 01       	movw	r30, r18
 2cc:	80 81       	ld	r24, Z
 2ce:	80 58       	subi	r24, 0x80	; 128
 2d0:	80 83       	st	Z, r24

	// So we have to map b1 bit 2 to 3 etc to conform with android
	if ((*b1 | 0x00) | (*b2 | 0x00))
 2d2:	28 81       	ld	r18, Y
 2d4:	f7 01       	movw	r30, r14
 2d6:	30 81       	ld	r19, Z
 2d8:	83 2f       	mov	r24, r19
 2da:	82 2b       	or	r24, r18
 2dc:	09 f4       	brne	.+2      	; 0x2e0 <RemapController+0x3e>
 2de:	5c c0       	rjmp	.+184    	; 0x398 <RemapController+0xf6>
	{	
			uchar oldb1 = *b1;
			uchar oldb2 = *b2;
			*b1=0;
 2e0:	18 82       	st	Y, r1
			*b2=0;
 2e2:	10 82       	st	Z, r1
			
			if (oldb1 & (1<<0)) *b1 |= (1<<0); // bottom
 2e4:	92 2f       	mov	r25, r18
 2e6:	20 ff       	sbrs	r18, 0
 2e8:	03 c0       	rjmp	.+6      	; 0x2f0 <RemapController+0x4e>
 2ea:	88 81       	ld	r24, Y
 2ec:	81 60       	ori	r24, 0x01	; 1
 2ee:	88 83       	st	Y, r24
			if (oldb1 & (1<<1)) *b1 |= (1<<1); // right
 2f0:	91 ff       	sbrs	r25, 1
 2f2:	03 c0       	rjmp	.+6      	; 0x2fa <RemapController+0x58>
 2f4:	88 81       	ld	r24, Y
 2f6:	82 60       	ori	r24, 0x02	; 2
 2f8:	88 83       	st	Y, r24
			if (oldb1 & (1<<2)) *b1 |= (1<<2); // left
 2fa:	92 ff       	sbrs	r25, 2
 2fc:	03 c0       	rjmp	.+6      	; 0x304 <RemapController+0x62>
 2fe:	88 81       	ld	r24, Y
 300:	84 60       	ori	r24, 0x04	; 4
 302:	88 83       	st	Y, r24
			if (oldb1 & (1<<3)) *b1 |= (1<<3); // top
 304:	93 ff       	sbrs	r25, 3
 306:	03 c0       	rjmp	.+6      	; 0x30e <RemapController+0x6c>
 308:	88 81       	ld	r24, Y
 30a:	88 60       	ori	r24, 0x08	; 8
 30c:	88 83       	st	Y, r24
			if (oldb1 & (1<<4)) *b1 |= (1<<4); // L2
 30e:	94 ff       	sbrs	r25, 4
 310:	03 c0       	rjmp	.+6      	; 0x318 <RemapController+0x76>
 312:	88 81       	ld	r24, Y
 314:	80 61       	ori	r24, 0x10	; 16
 316:	88 83       	st	Y, r24
			if (oldb1 & (1<<5)) *b1 |= (1<<5); // R2
 318:	95 ff       	sbrs	r25, 5
 31a:	03 c0       	rjmp	.+6      	; 0x322 <RemapController+0x80>
 31c:	88 81       	ld	r24, Y
 31e:	80 62       	ori	r24, 0x20	; 32
 320:	88 83       	st	Y, r24
			if (oldb1 & (1<<6)) *b1 |= (1<<6); // L1
 322:	96 ff       	sbrs	r25, 6
 324:	03 c0       	rjmp	.+6      	; 0x32c <RemapController+0x8a>
 326:	88 81       	ld	r24, Y
 328:	80 64       	ori	r24, 0x40	; 64
 32a:	88 83       	st	Y, r24
			if (oldb1 & (1<<7)) *b1 |= (1<<7); // R1
 32c:	22 23       	and	r18, r18
 32e:	1c f4       	brge	.+6      	; 0x336 <RemapController+0x94>
 330:	88 81       	ld	r24, Y
 332:	80 68       	ori	r24, 0x80	; 128
 334:	88 83       	st	Y, r24
			
			if (oldb2 & (1<<0)) *b2 |= (1<<0); // Select 
 336:	93 2f       	mov	r25, r19
 338:	30 ff       	sbrs	r19, 0
 33a:	04 c0       	rjmp	.+8      	; 0x344 <RemapController+0xa2>
 33c:	fb 01       	movw	r30, r22
 33e:	80 81       	ld	r24, Z
 340:	81 60       	ori	r24, 0x01	; 1
 342:	80 83       	st	Z, r24
			if (oldb2 & (1<<1)) *b2 |= (1<<1); // Start
 344:	91 ff       	sbrs	r25, 1
 346:	04 c0       	rjmp	.+8      	; 0x350 <RemapController+0xae>
 348:	fb 01       	movw	r30, r22
 34a:	80 81       	ld	r24, Z
 34c:	82 60       	ori	r24, 0x02	; 2
 34e:	80 83       	st	Z, r24
			if (oldb2 & (1<<2)) *b2 |= (1<<2); // L3
 350:	92 ff       	sbrs	r25, 2
 352:	04 c0       	rjmp	.+8      	; 0x35c <RemapController+0xba>
 354:	fb 01       	movw	r30, r22
 356:	80 81       	ld	r24, Z
 358:	84 60       	ori	r24, 0x04	; 4
 35a:	80 83       	st	Z, r24
			if (oldb2 & (1<<3)) *b2 |= (1<<3); // R3
 35c:	93 ff       	sbrs	r25, 3
 35e:	04 c0       	rjmp	.+8      	; 0x368 <RemapController+0xc6>
 360:	fb 01       	movw	r30, r22
 362:	80 81       	ld	r24, Z
 364:	88 60       	ori	r24, 0x08	; 8
 366:	80 83       	st	Z, r24
			if (oldb2 & (1<<4)) *b2 |= (1<<4); // 
 368:	94 ff       	sbrs	r25, 4
 36a:	04 c0       	rjmp	.+8      	; 0x374 <RemapController+0xd2>
 36c:	fb 01       	movw	r30, r22
 36e:	80 81       	ld	r24, Z
 370:	80 61       	ori	r24, 0x10	; 16
 372:	80 83       	st	Z, r24
			if (oldb2 & (1<<5)) *b2 |= (1<<5); // 
 374:	95 ff       	sbrs	r25, 5
 376:	04 c0       	rjmp	.+8      	; 0x380 <RemapController+0xde>
 378:	fb 01       	movw	r30, r22
 37a:	80 81       	ld	r24, Z
 37c:	80 62       	ori	r24, 0x20	; 32
 37e:	80 83       	st	Z, r24
			if (oldb2 & (1<<6)) *b2 |= (1<<6); // 
 380:	96 ff       	sbrs	r25, 6
 382:	04 c0       	rjmp	.+8      	; 0x38c <RemapController+0xea>
 384:	fb 01       	movw	r30, r22
 386:	80 81       	ld	r24, Z
 388:	80 64       	ori	r24, 0x40	; 64
 38a:	80 83       	st	Z, r24
			if (oldb2 & (1<<7)) *b2 |= (1<<7); // 
 38c:	33 23       	and	r19, r19
 38e:	24 f4       	brge	.+8      	; 0x398 <RemapController+0xf6>
 390:	fb 01       	movw	r30, r22
 392:	80 81       	ld	r24, Z
 394:	80 68       	ori	r24, 0x80	; 128
 396:	80 83       	st	Z, r24
	}
}	
 398:	df 91       	pop	r29
 39a:	cf 91       	pop	r28
 39c:	1f 91       	pop	r17
 39e:	0f 91       	pop	r16
 3a0:	ff 90       	pop	r15
 3a2:	ef 90       	pop	r14
 3a4:	08 95       	ret

000003a6 <ReadController>:

/* ------------------------------------------------------------------------- */

void ReadController(uchar id)
{
	cli(); // disable interrupts when reading controller
 3a6:	f8 94       	cli
	
	uchar	pcinton	= 0;
	
	reportBuffer = emptyReportBuffer;
 3a8:	e8 e2       	ldi	r30, 0x28	; 40
 3aa:	f1 e0       	ldi	r31, 0x01	; 1
 3ac:	95 e0       	ldi	r25, 0x05	; 5
 3ae:	df 01       	movw	r26, r30
 3b0:	1d 92       	st	X+, r1
 3b2:	9a 95       	dec	r25
 3b4:	e9 f7       	brne	.-6      	; 0x3b0 <ReadController+0xa>
	reportBuffer.reportid = id;
 3b6:	80 83       	st	Z, r24
	
	ReadAll(&reportBuffer);
 3b8:	cf 01       	movw	r24, r30
 3ba:	0e 94 34 02 	call	0x468	; 0x468 <ReadAll>

	if (!pcinton) PCICR	&= ~(1<<PCIE0);
 3be:	e8 e6       	ldi	r30, 0x68	; 104
 3c0:	f0 e0       	ldi	r31, 0x00	; 0
 3c2:	80 81       	ld	r24, Z
 3c4:	8e 7f       	andi	r24, 0xFE	; 254
 3c6:	80 83       	st	Z, r24
	
	sei(); // re-enable interrupts after reading controller
 3c8:	78 94       	sei
}
 3ca:	08 95       	ret

000003cc <main>:
}	

/* ------------------------------------------------------------------------- */

int main(void)
{
 3cc:	df 92       	push	r13
 3ce:	ef 92       	push	r14
 3d0:	ff 92       	push	r15
 3d2:	0f 93       	push	r16
 3d4:	1f 93       	push	r17
 3d6:	cf 93       	push	r28
 3d8:	df 93       	push	r29
	uchar   i = 1;
	char remainingData=0;
	uchar offset=0;

	HardwareInit();
 3da:	0e 94 94 00 	call	0x128	; 0x128 <HardwareInit>
	usbInit();
 3de:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <usbInit>

	// Set up descriptor
	hidMode = HIDM_1P;
 3e2:	10 92 35 01 	sts	0x0135, r1
	ReadController(1);
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <ReadController>
	SetHIDMode();
 3ec:	0e 94 9d 00 	call	0x13a	; 0x13a <SetHIDMode>
 3f0:	ff 24       	eor	r15, r15
 3f2:	f3 94       	inc	r15

//	uchar j = 1; //for speed test only
	
    for(;;){                /* main event loop */
        usbPoll();
        if(usbInterruptIsReady()){
 3f4:	c7 e4       	ldi	r28, 0x47	; 71
 3f6:	d1 e0       	ldi	r29, 0x01	; 1
	usbInit();

	// Set up descriptor
	hidMode = HIDM_1P;
	ReadController(1);
	SetHIDMode();
 3f8:	dd 24       	eor	r13, r13
 3fa:	d3 94       	inc	r13
//			j++; //for speed test only
		
			// handle report with more than 8 byte length (for NegCon and future expansion)
			do {
				if (remainingData<=8) {
					usbSetInterrupt(reportBufferAddress+offset, remainingData);
 3fc:	ee 24       	eor	r14, r14
 3fe:	01 c0       	rjmp	.+2      	; 0x402 <main+0x36>
	usbInit();

	// Set up descriptor
	hidMode = HIDM_1P;
	ReadController(1);
	SetHIDMode();
 400:	fd 2c       	mov	r15, r13

//	uchar j = 1; //for speed test only
	
    for(;;){                /* main event loop */
        usbPoll();
 402:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <usbPoll>
        if(usbInterruptIsReady()){
 406:	88 81       	ld	r24, Y
 408:	84 ff       	sbrs	r24, 4
 40a:	fb cf       	rjmp	.-10     	; 0x402 <main+0x36>
            /* called after every poll of the interrupt endpoint */
			ReadController(i);
 40c:	8f 2d       	mov	r24, r15
 40e:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <ReadController>
			
			remainingData=reportBufferLength;
 412:	00 91 32 01 	lds	r16, 0x0132
//			reportBufferNegCon.x=(j%4)*10; //for speed test only
//			j++; //for speed test only
		
			// handle report with more than 8 byte length (for NegCon and future expansion)
			do {
				if (remainingData<=8) {
 416:	09 30       	cpi	r16, 0x09	; 9
 418:	78 f4       	brcc	.+30     	; 0x438 <main+0x6c>
 41a:	1e 2d       	mov	r17, r14
 41c:	03 c0       	rjmp	.+6      	; 0x424 <main+0x58>
					usbSetInterrupt(reportBufferAddress+offset, remainingData);
					remainingData=0;
				}
				else {	
					usbSetInterrupt(reportBufferAddress+offset, 8);				
					offset+=8;
 41e:	18 5f       	subi	r17, 0xF8	; 248
//			reportBufferNegCon.x=(j%4)*10; //for speed test only
//			j++; //for speed test only
		
			// handle report with more than 8 byte length (for NegCon and future expansion)
			do {
				if (remainingData<=8) {
 420:	09 30       	cpi	r16, 0x09	; 9
 422:	58 f4       	brcc	.+22     	; 0x43a <main+0x6e>
					usbSetInterrupt(reportBufferAddress+offset, remainingData);
 424:	80 91 30 01 	lds	r24, 0x0130
 428:	90 91 31 01 	lds	r25, 0x0131
 42c:	81 0f       	add	r24, r17
 42e:	91 1d       	adc	r25, r1
 430:	60 2f       	mov	r22, r16
 432:	0e 94 3d 04 	call	0x87a	; 0x87a <usbSetInterrupt>
 436:	12 c0       	rjmp	.+36     	; 0x45c <main+0x90>
 438:	1e 2d       	mov	r17, r14
					remainingData=0;
				}
				else {	
					usbSetInterrupt(reportBufferAddress+offset, 8);				
 43a:	80 91 30 01 	lds	r24, 0x0130
 43e:	90 91 31 01 	lds	r25, 0x0131
 442:	81 0f       	add	r24, r17
 444:	91 1d       	adc	r25, r1
 446:	68 e0       	ldi	r22, 0x08	; 8
 448:	0e 94 3d 04 	call	0x87a	; 0x87a <usbSetInterrupt>
					offset+=8;
					remainingData-=8;
 44c:	08 50       	subi	r16, 0x08	; 8
					do {
						usbPoll();
 44e:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <usbPoll>
					} while (!usbInterruptIsReady());	
 452:	88 81       	ld	r24, Y
 454:	84 ff       	sbrs	r24, 4
 456:	fb cf       	rjmp	.-10     	; 0x44e <main+0x82>
				}
			} while (remainingData>0);				
 458:	00 23       	and	r16, r16
 45a:	09 f7       	brne	.-62     	; 0x41e <main+0x52>

			i++;
 45c:	f3 94       	inc	r15
			if (i > hidNumReports) i = 1;
 45e:	80 91 2e 01 	lds	r24, 0x012E
 462:	8f 15       	cp	r24, r15
 464:	70 f6       	brcc	.-100    	; 0x402 <main+0x36>
 466:	cc cf       	rjmp	.-104    	; 0x400 <main+0x34>

00000468 <ReadAll>:
#include <util/delay.h>
#include "report.h"
#include "direct.h"

void ReadAll(report_t *reportBuffer)
{
 468:	dc 01       	movw	r26, r24
	DDRB	&= 0b11100000;				// PB1-PB4 inputs
 46a:	e4 e2       	ldi	r30, 0x24	; 36
 46c:	f0 e0       	ldi	r31, 0x00	; 0
 46e:	80 81       	ld	r24, Z
 470:	80 7e       	andi	r24, 0xE0	; 224
 472:	80 83       	st	Z, r24
	PORTB	|= 0b00011111;				// Pull-ups
 474:	e5 e2       	ldi	r30, 0x25	; 37
 476:	f0 e0       	ldi	r31, 0x00	; 0
 478:	80 81       	ld	r24, Z
 47a:	8f 61       	ori	r24, 0x1F	; 31
 47c:	80 83       	st	Z, r24

	DDRC	&= 0b11000000;				// PC0-PC5 inputs
 47e:	e7 e2       	ldi	r30, 0x27	; 39
 480:	f0 e0       	ldi	r31, 0x00	; 0
 482:	80 81       	ld	r24, Z
 484:	80 7c       	andi	r24, 0xC0	; 192
 486:	80 83       	st	Z, r24
	PORTC	|= 0b00111111;				// Pull-ups
 488:	e8 e2       	ldi	r30, 0x28	; 40
 48a:	f0 e0       	ldi	r31, 0x00	; 0
 48c:	80 81       	ld	r24, Z
 48e:	8f 63       	ori	r24, 0x3F	; 63
 490:	80 83       	st	Z, r24

	DDRD	&= 0b00000110;				// All inputs except Select, don't touch USB D+/-
 492:	ea e2       	ldi	r30, 0x2A	; 42
 494:	f0 e0       	ldi	r31, 0x00	; 0
 496:	80 81       	ld	r24, Z
 498:	86 70       	andi	r24, 0x06	; 6
 49a:	80 83       	st	Z, r24
	PORTD	|= 0b11111001;				// Pull-ups
 49c:	eb e2       	ldi	r30, 0x2B	; 43
 49e:	f0 e0       	ldi	r31, 0x00	; 0
 4a0:	80 81       	ld	r24, Z
 4a2:	89 6f       	ori	r24, 0xF9	; 249
 4a4:	80 83       	st	Z, r24
	
	// PD0?
	// PB5 LED?

	if (!(PIND & (1<<3))) reportBuffer->y = -128;		// up
 4a6:	4b 99       	sbic	0x09, 3	; 9
 4a8:	04 c0       	rjmp	.+8      	; 0x4b2 <ReadAll+0x4a>
 4aa:	80 e8       	ldi	r24, 0x80	; 128
 4ac:	14 96       	adiw	r26, 0x04	; 4
 4ae:	8c 93       	st	X, r24
 4b0:	14 97       	sbiw	r26, 0x04	; 4
	if (!(PIND & (1<<4))) reportBuffer->y = 127;		// down
 4b2:	4c 99       	sbic	0x09, 4	; 9
 4b4:	04 c0       	rjmp	.+8      	; 0x4be <ReadAll+0x56>
 4b6:	8f e7       	ldi	r24, 0x7F	; 127
 4b8:	14 96       	adiw	r26, 0x04	; 4
 4ba:	8c 93       	st	X, r24
 4bc:	14 97       	sbiw	r26, 0x04	; 4
	if (!(PIND & (1<<5))) reportBuffer->x = -128;		// left
 4be:	4d 99       	sbic	0x09, 5	; 9
 4c0:	04 c0       	rjmp	.+8      	; 0x4ca <ReadAll+0x62>
 4c2:	80 e8       	ldi	r24, 0x80	; 128
 4c4:	13 96       	adiw	r26, 0x03	; 3
 4c6:	8c 93       	st	X, r24
 4c8:	13 97       	sbiw	r26, 0x03	; 3
	if (!(PIND & (1<<6))) reportBuffer->x = 127;		// right
 4ca:	4e 99       	sbic	0x09, 6	; 9
 4cc:	04 c0       	rjmp	.+8      	; 0x4d6 <ReadAll+0x6e>
 4ce:	8f e7       	ldi	r24, 0x7F	; 127
 4d0:	13 96       	adiw	r26, 0x03	; 3
 4d2:	8c 93       	st	X, r24
 4d4:	13 97       	sbiw	r26, 0x03	; 3
	if (!(PIND & (1<<0))) reportBuffer->b1 |= (1<<0);	// Button 1
 4d6:	48 99       	sbic	0x09, 0	; 9
 4d8:	07 c0       	rjmp	.+14     	; 0x4e8 <ReadAll+0x80>
 4da:	11 96       	adiw	r26, 0x01	; 1
 4dc:	8c 91       	ld	r24, X
 4de:	11 97       	sbiw	r26, 0x01	; 1
 4e0:	81 60       	ori	r24, 0x01	; 1
 4e2:	11 96       	adiw	r26, 0x01	; 1
 4e4:	8c 93       	st	X, r24
 4e6:	11 97       	sbiw	r26, 0x01	; 1
	if (!(PIND & (1<<7))) reportBuffer->b1 |= (1<<1);	// Button 2
 4e8:	89 b1       	in	r24, 0x09	; 9
 4ea:	88 23       	and	r24, r24
 4ec:	3c f0       	brlt	.+14     	; 0x4fc <ReadAll+0x94>
 4ee:	11 96       	adiw	r26, 0x01	; 1
 4f0:	8c 91       	ld	r24, X
 4f2:	11 97       	sbiw	r26, 0x01	; 1
 4f4:	82 60       	ori	r24, 0x02	; 2
 4f6:	11 96       	adiw	r26, 0x01	; 1
 4f8:	8c 93       	st	X, r24
 4fa:	11 97       	sbiw	r26, 0x01	; 1

	if (!(PINB & (1<<0))) reportBuffer->b1 |= (1<<2);	// Button 3
 4fc:	18 99       	sbic	0x03, 0	; 3
 4fe:	07 c0       	rjmp	.+14     	; 0x50e <__stack+0xf>
 500:	11 96       	adiw	r26, 0x01	; 1
 502:	8c 91       	ld	r24, X
 504:	11 97       	sbiw	r26, 0x01	; 1
 506:	84 60       	ori	r24, 0x04	; 4
 508:	11 96       	adiw	r26, 0x01	; 1
 50a:	8c 93       	st	X, r24
 50c:	11 97       	sbiw	r26, 0x01	; 1
	if (!(PINB & (1<<1))) reportBuffer->b1 |= (1<<3);	// Button 4
 50e:	19 99       	sbic	0x03, 1	; 3
 510:	07 c0       	rjmp	.+14     	; 0x520 <__stack+0x21>
 512:	11 96       	adiw	r26, 0x01	; 1
 514:	8c 91       	ld	r24, X
 516:	11 97       	sbiw	r26, 0x01	; 1
 518:	88 60       	ori	r24, 0x08	; 8
 51a:	11 96       	adiw	r26, 0x01	; 1
 51c:	8c 93       	st	X, r24
 51e:	11 97       	sbiw	r26, 0x01	; 1
	if (!(PINB & (1<<2))) reportBuffer->b1 |= (1<<4);	// Button 5
 520:	1a 99       	sbic	0x03, 2	; 3
 522:	07 c0       	rjmp	.+14     	; 0x532 <__stack+0x33>
 524:	11 96       	adiw	r26, 0x01	; 1
 526:	8c 91       	ld	r24, X
 528:	11 97       	sbiw	r26, 0x01	; 1
 52a:	80 61       	ori	r24, 0x10	; 16
 52c:	11 96       	adiw	r26, 0x01	; 1
 52e:	8c 93       	st	X, r24
 530:	11 97       	sbiw	r26, 0x01	; 1
	if (!(PINB & (1<<3))) reportBuffer->b1 |= (1<<5);	// Button 6
 532:	1b 99       	sbic	0x03, 3	; 3
 534:	07 c0       	rjmp	.+14     	; 0x544 <__stack+0x45>
 536:	11 96       	adiw	r26, 0x01	; 1
 538:	8c 91       	ld	r24, X
 53a:	11 97       	sbiw	r26, 0x01	; 1
 53c:	80 62       	ori	r24, 0x20	; 32
 53e:	11 96       	adiw	r26, 0x01	; 1
 540:	8c 93       	st	X, r24
 542:	11 97       	sbiw	r26, 0x01	; 1
	if (!(PINB & (1<<4))) reportBuffer->b1 |= (1<<6);	// Button 7
 544:	1c 99       	sbic	0x03, 4	; 3
 546:	07 c0       	rjmp	.+14     	; 0x556 <__stack+0x57>
 548:	11 96       	adiw	r26, 0x01	; 1
 54a:	8c 91       	ld	r24, X
 54c:	11 97       	sbiw	r26, 0x01	; 1
 54e:	80 64       	ori	r24, 0x40	; 64
 550:	11 96       	adiw	r26, 0x01	; 1
 552:	8c 93       	st	X, r24
 554:	11 97       	sbiw	r26, 0x01	; 1
	if (!(PINB & (1<<5))) reportBuffer->b1 |= (1<<7);	// Button 8
 556:	1d 99       	sbic	0x03, 5	; 3
 558:	07 c0       	rjmp	.+14     	; 0x568 <__stack+0x69>
 55a:	11 96       	adiw	r26, 0x01	; 1
 55c:	8c 91       	ld	r24, X
 55e:	11 97       	sbiw	r26, 0x01	; 1
 560:	80 68       	ori	r24, 0x80	; 128
 562:	11 96       	adiw	r26, 0x01	; 1
 564:	8c 93       	st	X, r24
 566:	11 97       	sbiw	r26, 0x01	; 1
	
	if (!(PINC & (1<<0))) reportBuffer->b2 |= (1<<0);	// Button 9
 568:	30 99       	sbic	0x06, 0	; 6
 56a:	07 c0       	rjmp	.+14     	; 0x57a <__stack+0x7b>
 56c:	12 96       	adiw	r26, 0x02	; 2
 56e:	8c 91       	ld	r24, X
 570:	12 97       	sbiw	r26, 0x02	; 2
 572:	81 60       	ori	r24, 0x01	; 1
 574:	12 96       	adiw	r26, 0x02	; 2
 576:	8c 93       	st	X, r24
 578:	12 97       	sbiw	r26, 0x02	; 2
	if (!(PINC & (1<<1))) reportBuffer->b2 |= (1<<1);	// Button 10
 57a:	31 99       	sbic	0x06, 1	; 6
 57c:	07 c0       	rjmp	.+14     	; 0x58c <__stack+0x8d>
 57e:	12 96       	adiw	r26, 0x02	; 2
 580:	8c 91       	ld	r24, X
 582:	12 97       	sbiw	r26, 0x02	; 2
 584:	82 60       	ori	r24, 0x02	; 2
 586:	12 96       	adiw	r26, 0x02	; 2
 588:	8c 93       	st	X, r24
 58a:	12 97       	sbiw	r26, 0x02	; 2
	if (!(PINC & (1<<2))) reportBuffer->b2 |= (1<<2);	// Button 11
 58c:	32 99       	sbic	0x06, 2	; 6
 58e:	07 c0       	rjmp	.+14     	; 0x59e <__stack+0x9f>
 590:	12 96       	adiw	r26, 0x02	; 2
 592:	8c 91       	ld	r24, X
 594:	12 97       	sbiw	r26, 0x02	; 2
 596:	84 60       	ori	r24, 0x04	; 4
 598:	12 96       	adiw	r26, 0x02	; 2
 59a:	8c 93       	st	X, r24
 59c:	12 97       	sbiw	r26, 0x02	; 2
	if (!(PINC & (1<<3))) reportBuffer->b2 |= (1<<3);	// Button 12	
 59e:	33 99       	sbic	0x06, 3	; 6
 5a0:	07 c0       	rjmp	.+14     	; 0x5b0 <__stack+0xb1>
 5a2:	12 96       	adiw	r26, 0x02	; 2
 5a4:	8c 91       	ld	r24, X
 5a6:	12 97       	sbiw	r26, 0x02	; 2
 5a8:	88 60       	ori	r24, 0x08	; 8
 5aa:	12 96       	adiw	r26, 0x02	; 2
 5ac:	8c 93       	st	X, r24
 5ae:	12 97       	sbiw	r26, 0x02	; 2
	if (!(PINC & (1<<4))) reportBuffer->b2 |= (1<<4);	// Button 13
 5b0:	34 99       	sbic	0x06, 4	; 6
 5b2:	07 c0       	rjmp	.+14     	; 0x5c2 <__stack+0xc3>
 5b4:	12 96       	adiw	r26, 0x02	; 2
 5b6:	8c 91       	ld	r24, X
 5b8:	12 97       	sbiw	r26, 0x02	; 2
 5ba:	80 61       	ori	r24, 0x10	; 16
 5bc:	12 96       	adiw	r26, 0x02	; 2
 5be:	8c 93       	st	X, r24
 5c0:	12 97       	sbiw	r26, 0x02	; 2
	if (!(PINC & (1<<5))) reportBuffer->b2 |= (1<<5);	// Button 14
 5c2:	35 99       	sbic	0x06, 5	; 6
 5c4:	06 c0       	rjmp	.+12     	; 0x5d2 <__stack+0xd3>
 5c6:	12 96       	adiw	r26, 0x02	; 2
 5c8:	8c 91       	ld	r24, X
 5ca:	12 97       	sbiw	r26, 0x02	; 2
 5cc:	80 62       	ori	r24, 0x20	; 32
 5ce:	12 96       	adiw	r26, 0x02	; 2
 5d0:	8c 93       	st	X, r24
 5d2:	08 95       	ret

000005d4 <usbInit>:
/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbInit(void)
{
#if USB_INTR_CFG_SET != 0
    USB_INTR_CFG |= USB_INTR_CFG_SET;
 5d4:	e9 e6       	ldi	r30, 0x69	; 105
 5d6:	f0 e0       	ldi	r31, 0x00	; 0
 5d8:	80 81       	ld	r24, Z
 5da:	82 60       	ori	r24, 0x02	; 2
 5dc:	80 83       	st	Z, r24
#endif
#if USB_INTR_CFG_CLR != 0
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
 5de:	ed e3       	ldi	r30, 0x3D	; 61
 5e0:	f0 e0       	ldi	r31, 0x00	; 0
 5e2:	80 81       	ld	r24, Z
 5e4:	81 60       	ori	r24, 0x01	; 1
 5e6:	80 83       	st	Z, r24
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
 5e8:	e8 e4       	ldi	r30, 0x48	; 72
 5ea:	f1 e0       	ldi	r31, 0x01	; 1
 5ec:	8b e4       	ldi	r24, 0x4B	; 75
 5ee:	80 83       	st	Z, r24
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
    usbResetDataToggling();
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    usbTxLen1 = USBPID_NAK;
 5f0:	31 97       	sbiw	r30, 0x01	; 1
 5f2:	8a e5       	ldi	r24, 0x5A	; 90
 5f4:	80 83       	st	Z, r24
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
    usbTxLen3 = USBPID_NAK;
#endif
#endif
}
 5f6:	08 95       	ret

000005f8 <usbPoll>:
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
{
 5f8:	1f 93       	push	r17
 5fa:	cf 93       	push	r28
 5fc:	df 93       	push	r29
schar   len;
uchar   i;

    len = usbRxLen - 3;
 5fe:	80 91 58 01 	lds	r24, 0x0158
 602:	98 2f       	mov	r25, r24
 604:	93 50       	subi	r25, 0x03	; 3
    if(len >= 0){
 606:	0a f4       	brpl	.+2      	; 0x60a <usbPoll+0x12>
 608:	b9 c0       	rjmp	.+370    	; 0x77c <usbPoll+0x184>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
 60a:	20 91 55 01 	lds	r18, 0x0155
    if(usbRxToken < 0x10){  /* OUT to endpoint != 0: endpoint number in usbRxToken */
        usbFunctionWriteOut(data, len);
        return;
    }
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
 60e:	80 91 54 01 	lds	r24, 0x0154
 612:	8d 32       	cpi	r24, 0x2D	; 45
 614:	09 f0       	breq	.+2      	; 0x618 <usbPoll+0x20>
 616:	b0 c0       	rjmp	.+352    	; 0x778 <usbPoll+0x180>
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
 618:	98 30       	cpi	r25, 0x08	; 8
 61a:	09 f0       	breq	.+2      	; 0x61e <usbPoll+0x26>
 61c:	ad c0       	rjmp	.+346    	; 0x778 <usbPoll+0x180>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
 61e:	8c e0       	ldi	r24, 0x0C	; 12
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	82 1b       	sub	r24, r18
 624:	91 09       	sbc	r25, r1
 626:	fc 01       	movw	r30, r24
 628:	e4 5a       	subi	r30, 0xA4	; 164
 62a:	fe 4f       	sbci	r31, 0xFE	; 254
 * routine. It distinguishes between SETUP and DATA packets and processes
 * them accordingly.
 */
static inline void usbProcessRx(uchar *data, uchar len)
{
usbRequest_t    *rq = (void *)data;
 62c:	ef 01       	movw	r28, r30
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
            return;
        usbMsgLen_t replyLen;
        usbTxBuf[0] = USBPID_DATA0;         /* initialize data toggling */
 62e:	83 ec       	ldi	r24, 0xC3	; 195
 630:	80 93 3c 01 	sts	0x013C, r24
        usbTxLen = USBPID_NAK;              /* abort pending transmit */
 634:	8a e5       	ldi	r24, 0x5A	; 90
 636:	80 93 22 01 	sts	0x0122, r24
        usbMsgFlags = 0;
 63a:	10 92 2d 01 	sts	0x012D, r1
        uchar type = rq->bmRequestType & USBRQ_TYPE_MASK;
        if(type != USBRQ_TYPE_STANDARD){    /* standard requests are handled by driver */
 63e:	80 81       	ld	r24, Z
 640:	80 76       	andi	r24, 0x60	; 96
 642:	29 f0       	breq	.+10     	; 0x64e <usbPoll+0x56>
            replyLen = usbFunctionSetup(data);
 644:	cf 01       	movw	r24, r30
 646:	0e 94 ed 00 	call	0x1da	; 0x1da <usbFunctionSetup>
 64a:	28 2f       	mov	r18, r24
 64c:	8c c0       	rjmp	.+280    	; 0x766 <usbPoll+0x16e>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
uchar   len  = 0, *dataPtr = usbTxBuf + 9;  /* there are 2 bytes free space at the end of the buffer */
uchar   value = rq->wValue.bytes[0];
 64e:	92 81       	ldd	r25, Z+2	; 0x02
#if USB_CFG_IMPLEMENT_HALT
uchar   index = rq->wIndex.bytes[0];
#endif

    dataPtr[0] = 0; /* default reply common to USBRQ_GET_STATUS and USBRQ_GET_INTERFACE */
 650:	10 92 45 01 	sts	0x0145, r1
    SWITCH_START(rq->bRequest)
 654:	81 81       	ldd	r24, Z+1	; 0x01
    SWITCH_CASE(USBRQ_GET_STATUS)           /* 0 */
 656:	88 23       	and	r24, r24
 658:	31 f4       	brne	.+12     	; 0x666 <usbPoll+0x6e>
            dataPtr[0] =  USB_CFG_IS_SELF_POWERED;
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
 65a:	e6 e4       	ldi	r30, 0x46	; 70
 65c:	f1 e0       	ldi	r31, 0x01	; 1
 65e:	10 82       	st	Z, r1
 660:	22 e0       	ldi	r18, 0x02	; 2
 662:	31 97       	sbiw	r30, 0x01	; 1
 664:	7c c0       	rjmp	.+248    	; 0x75e <usbPoll+0x166>
        if(value == 0 && index == 0x81){    /* feature 0 == HALT for endpoint == 1 */
            usbTxLen1 = rq->bRequest == USBRQ_CLEAR_FEATURE ? USBPID_NAK : USBPID_STALL;
            usbResetDataToggling();
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
 666:	85 30       	cpi	r24, 0x05	; 5
 668:	31 f4       	brne	.+12     	; 0x676 <usbPoll+0x7e>
        usbNewDeviceAddr = value;
 66a:	90 93 59 01 	sts	0x0159, r25
 66e:	20 e0       	ldi	r18, 0x00	; 0
 670:	e5 e4       	ldi	r30, 0x45	; 69
 672:	f1 e0       	ldi	r31, 0x01	; 1
 674:	74 c0       	rjmp	.+232    	; 0x75e <usbPoll+0x166>
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
 676:	86 30       	cpi	r24, 0x06	; 6
 678:	09 f0       	breq	.+2      	; 0x67c <usbPoll+0x84>
 67a:	51 c0       	rjmp	.+162    	; 0x71e <usbPoll+0x126>
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar       flags = USB_FLG_MSGPTR_IS_ROM;

    SWITCH_START(rq->wValue.bytes[1])
 67c:	83 81       	ldd	r24, Z+3	; 0x03
    SWITCH_CASE(USBDESCR_DEVICE)    /* 1 */
 67e:	81 30       	cpi	r24, 0x01	; 1
 680:	31 f4       	brne	.+12     	; 0x68e <usbPoll+0x96>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_DEVICE, usbDescriptorDevice)
 682:	cf 01       	movw	r24, r30
 684:	0e 94 13 01 	call	0x226	; 0x226 <usbFunctionDescriptor>
 688:	28 2f       	mov	r18, r24
 68a:	80 e4       	ldi	r24, 0x40	; 64
 68c:	45 c0       	rjmp	.+138    	; 0x718 <usbPoll+0x120>
    SWITCH_CASE(USBDESCR_CONFIG)    /* 2 */
 68e:	82 30       	cpi	r24, 0x02	; 2
 690:	31 f4       	brne	.+12     	; 0x69e <usbPoll+0xa6>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_CONFIGURATION, usbDescriptorConfiguration)
 692:	cf 01       	movw	r24, r30
 694:	0e 94 13 01 	call	0x226	; 0x226 <usbFunctionDescriptor>
 698:	28 2f       	mov	r18, r24
 69a:	80 e0       	ldi	r24, 0x00	; 0
 69c:	3d c0       	rjmp	.+122    	; 0x718 <usbPoll+0x120>
    SWITCH_CASE(USBDESCR_STRING)    /* 3 */
 69e:	83 30       	cpi	r24, 0x03	; 3
 6a0:	31 f5       	brne	.+76     	; 0x6ee <usbPoll+0xf6>
        if(USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_RAM)
            flags = 0;
        len = usbFunctionDescriptor(rq);
#else   /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
        SWITCH_START(rq->wValue.bytes[0])
        SWITCH_CASE(0)
 6a2:	99 23       	and	r25, r25
 6a4:	49 f4       	brne	.+18     	; 0x6b8 <usbPoll+0xc0>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_0, usbDescriptorString0)
 6a6:	8a ed       	ldi	r24, 0xDA	; 218
 6a8:	90 e0       	ldi	r25, 0x00	; 0
 6aa:	90 93 57 01 	sts	0x0157, r25
 6ae:	80 93 56 01 	sts	0x0156, r24
 6b2:	80 e4       	ldi	r24, 0x40	; 64
 6b4:	24 e0       	ldi	r18, 0x04	; 4
 6b6:	30 c0       	rjmp	.+96     	; 0x718 <usbPoll+0x120>
        SWITCH_CASE(1)
 6b8:	91 30       	cpi	r25, 0x01	; 1
 6ba:	49 f4       	brne	.+18     	; 0x6ce <usbPoll+0xd6>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_VENDOR, usbDescriptorStringVendor)
 6bc:	8e ed       	ldi	r24, 0xDE	; 222
 6be:	90 e0       	ldi	r25, 0x00	; 0
 6c0:	90 93 57 01 	sts	0x0157, r25
 6c4:	80 93 56 01 	sts	0x0156, r24
 6c8:	80 e4       	ldi	r24, 0x40	; 64
 6ca:	2c e0       	ldi	r18, 0x0C	; 12
 6cc:	25 c0       	rjmp	.+74     	; 0x718 <usbPoll+0x120>
        SWITCH_CASE(2)
 6ce:	92 30       	cpi	r25, 0x02	; 2
 6d0:	31 f4       	brne	.+12     	; 0x6de <usbPoll+0xe6>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_PRODUCT, usbDescriptorStringDevice)
 6d2:	cf 01       	movw	r24, r30
 6d4:	0e 94 13 01 	call	0x226	; 0x226 <usbFunctionDescriptor>
 6d8:	28 2f       	mov	r18, r24
 6da:	80 e4       	ldi	r24, 0x40	; 64
 6dc:	1d c0       	rjmp	.+58     	; 0x718 <usbPoll+0x120>
        SWITCH_CASE(3)
 6de:	93 30       	cpi	r25, 0x03	; 3
 6e0:	c9 f4       	brne	.+50     	; 0x714 <usbPoll+0x11c>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_SERIAL_NUMBER, usbDescriptorStringSerialNumber)
 6e2:	cf 01       	movw	r24, r30
 6e4:	0e 94 13 01 	call	0x226	; 0x226 <usbFunctionDescriptor>
 6e8:	28 2f       	mov	r18, r24
 6ea:	80 e4       	ldi	r24, 0x40	; 64
 6ec:	15 c0       	rjmp	.+42     	; 0x718 <usbPoll+0x120>
                len = usbFunctionDescriptor(rq);
            }
        SWITCH_END
#endif  /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
#if USB_CFG_DESCR_PROPS_HID_REPORT  /* only support HID descriptors if enabled */
    SWITCH_CASE(USBDESCR_HID)       /* 0x21 */
 6ee:	81 32       	cpi	r24, 0x21	; 33
 6f0:	49 f4       	brne	.+18     	; 0x704 <usbPoll+0x10c>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID, usbDescriptorConfiguration + 18)
 6f2:	82 e1       	ldi	r24, 0x12	; 18
 6f4:	91 e0       	ldi	r25, 0x01	; 1
 6f6:	90 93 57 01 	sts	0x0157, r25
 6fa:	80 93 56 01 	sts	0x0156, r24
 6fe:	80 e4       	ldi	r24, 0x40	; 64
 700:	29 e0       	ldi	r18, 0x09	; 9
 702:	0a c0       	rjmp	.+20     	; 0x718 <usbPoll+0x120>
    SWITCH_CASE(USBDESCR_HID_REPORT)/* 0x22 */
 704:	82 32       	cpi	r24, 0x22	; 34
 706:	31 f4       	brne	.+12     	; 0x714 <usbPoll+0x11c>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID_REPORT, usbDescriptorHidReport)
 708:	cf 01       	movw	r24, r30
 70a:	0e 94 13 01 	call	0x226	; 0x226 <usbFunctionDescriptor>
 70e:	28 2f       	mov	r18, r24
 710:	80 e4       	ldi	r24, 0x40	; 64
 712:	02 c0       	rjmp	.+4      	; 0x718 <usbPoll+0x120>
 714:	80 e4       	ldi	r24, 0x40	; 64
 716:	20 e0       	ldi	r18, 0x00	; 0
    SWITCH_DEFAULT
        if(USB_CFG_DESCR_PROPS_UNKNOWN & USB_PROP_IS_DYNAMIC){
            len = usbFunctionDescriptor(rq);
        }
    SWITCH_END
    usbMsgFlags = flags;
 718:	80 93 2d 01 	sts	0x012D, r24
 71c:	24 c0       	rjmp	.+72     	; 0x766 <usbPoll+0x16e>
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
 71e:	88 30       	cpi	r24, 0x08	; 8
 720:	21 f4       	brne	.+8      	; 0x72a <usbPoll+0x132>
 722:	21 e0       	ldi	r18, 0x01	; 1
 724:	eb e5       	ldi	r30, 0x5B	; 91
 726:	f1 e0       	ldi	r31, 0x01	; 1
 728:	1a c0       	rjmp	.+52     	; 0x75e <usbPoll+0x166>
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
 72a:	89 30       	cpi	r24, 0x09	; 9
 72c:	31 f4       	brne	.+12     	; 0x73a <usbPoll+0x142>
        usbConfiguration = value;
 72e:	90 93 5b 01 	sts	0x015B, r25
 732:	20 e0       	ldi	r18, 0x00	; 0
 734:	e5 e4       	ldi	r30, 0x45	; 69
 736:	f1 e0       	ldi	r31, 0x01	; 1
 738:	12 c0       	rjmp	.+36     	; 0x75e <usbPoll+0x166>
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
 73a:	8a 30       	cpi	r24, 0x0A	; 10
 73c:	21 f4       	brne	.+8      	; 0x746 <usbPoll+0x14e>
 73e:	21 e0       	ldi	r18, 0x01	; 1
 740:	e5 e4       	ldi	r30, 0x45	; 69
 742:	f1 e0       	ldi	r31, 0x01	; 1
 744:	0c c0       	rjmp	.+24     	; 0x75e <usbPoll+0x166>
        len = 1;
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    SWITCH_CASE(USBRQ_SET_INTERFACE)        /* 11 */
 746:	8b 30       	cpi	r24, 0x0B	; 11
 748:	21 f0       	breq	.+8      	; 0x752 <usbPoll+0x15a>
 74a:	20 e0       	ldi	r18, 0x00	; 0
 74c:	e5 e4       	ldi	r30, 0x45	; 69
 74e:	f1 e0       	ldi	r31, 0x01	; 1
 750:	06 c0       	rjmp	.+12     	; 0x75e <usbPoll+0x166>
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
 752:	8b e4       	ldi	r24, 0x4B	; 75
 754:	80 93 48 01 	sts	0x0148, r24
 758:	20 e0       	ldi	r18, 0x00	; 0
 75a:	e5 e4       	ldi	r30, 0x45	; 69
 75c:	f1 e0       	ldi	r31, 0x01	; 1
        usbResetStall();
#endif
    SWITCH_DEFAULT                          /* 7=SET_DESCRIPTOR, 12=SYNC_FRAME */
        /* Should we add an optional hook here? */
    SWITCH_END
    usbMsgPtr = dataPtr;
 75e:	f0 93 57 01 	sts	0x0157, r31
 762:	e0 93 56 01 	sts	0x0156, r30
            }
            usbMsgFlags = USB_FLG_USE_USER_RW;
        }else   /* The 'else' prevents that we limit a replyLen of USB_NO_MSG to the maximum transfer len. */
#endif
        if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
            if(!rq->wLength.bytes[1] && replyLen > rq->wLength.bytes[0])    /* limit length to max */
 766:	8f 81       	ldd	r24, Y+7	; 0x07
 768:	88 23       	and	r24, r24
 76a:	21 f4       	brne	.+8      	; 0x774 <usbPoll+0x17c>
 76c:	8e 81       	ldd	r24, Y+6	; 0x06
 76e:	82 17       	cp	r24, r18
 770:	08 f4       	brcc	.+2      	; 0x774 <usbPoll+0x17c>
 772:	28 2f       	mov	r18, r24
                replyLen = rq->wLength.bytes[0];
        }else{
            if(replyLen > rq->wLength.word)     /* limit length to max */
                replyLen = rq->wLength.word;
        }
        usbMsgLen = replyLen;
 774:	20 93 23 01 	sts	0x0123, r18
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
#if USB_CFG_HAVE_FLOWCONTROL
        if(usbRxLen > 0)    /* only mark as available if not inactivated */
            usbRxLen = 0;
#else
        usbRxLen = 0;       /* mark rx buffer as available */
 778:	10 92 58 01 	sts	0x0158, r1
#endif
    }
    if(usbTxLen & 0x10){    /* transmit system idle */
 77c:	80 91 22 01 	lds	r24, 0x0122
 780:	84 ff       	sbrs	r24, 4
 782:	57 c0       	rjmp	.+174    	; 0x832 <usbPoll+0x23a>
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
 784:	10 91 23 01 	lds	r17, 0x0123
 788:	1f 3f       	cpi	r17, 0xFF	; 255
 78a:	09 f4       	brne	.+2      	; 0x78e <usbPoll+0x196>
 78c:	52 c0       	rjmp	.+164    	; 0x832 <usbPoll+0x23a>
{
usbMsgLen_t wantLen;
uchar       len;

    wantLen = usbMsgLen;
    if(wantLen > 8)
 78e:	19 30       	cpi	r17, 0x09	; 9
 790:	08 f0       	brcs	.+2      	; 0x794 <usbPoll+0x19c>
 792:	5c c0       	rjmp	.+184    	; 0x84c <usbPoll+0x254>
        wantLen = 8;
    usbMsgLen -= wantLen;
 794:	10 92 23 01 	sts	0x0123, r1
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
 798:	ec e3       	ldi	r30, 0x3C	; 60
 79a:	f1 e0       	ldi	r31, 0x01	; 1
 79c:	80 81       	ld	r24, Z
 79e:	98 e8       	ldi	r25, 0x88	; 136
 7a0:	89 27       	eor	r24, r25
 7a2:	80 83       	st	Z, r24
/* This function is similar to usbFunctionRead(), but it's also called for
 * data handled automatically by the driver (e.g. descriptor reads).
 */
static uchar usbDeviceRead(uchar *data, uchar len)
{
    if(len > 0){    /* don't bother app with 0 sized reads */
 7a4:	11 23       	and	r17, r17
 7a6:	09 f4       	brne	.+2      	; 0x7aa <usbPoll+0x1b2>
 7a8:	5d c0       	rjmp	.+186    	; 0x864 <usbPoll+0x26c>
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
            len = usbFunctionRead(data, len);
        }else
#endif
        {
            uchar i = len, *r = usbMsgPtr;
 7aa:	20 91 56 01 	lds	r18, 0x0156
 7ae:	30 91 57 01 	lds	r19, 0x0157
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
 7b2:	80 91 2d 01 	lds	r24, 0x012D
 7b6:	86 ff       	sbrs	r24, 6
 7b8:	14 c0       	rjmp	.+40     	; 0x7e2 <usbPoll+0x1ea>
 7ba:	ad e3       	ldi	r26, 0x3D	; 61
 7bc:	b1 e0       	ldi	r27, 0x01	; 1
 7be:	80 e0       	ldi	r24, 0x00	; 0
 7c0:	90 e0       	ldi	r25, 0x00	; 0
                do{
                    uchar c = USB_READ_FLASH(r);    /* assign to char size variable to enforce byte ops */
 7c2:	f9 01       	movw	r30, r18
 7c4:	e8 0f       	add	r30, r24
 7c6:	f9 1f       	adc	r31, r25
 7c8:	e4 91       	lpm	r30, Z+
                    *data++ = c;
 7ca:	ed 93       	st	X+, r30
 7cc:	01 96       	adiw	r24, 0x01	; 1
                    r++;
                }while(--i);
 7ce:	18 17       	cp	r17, r24
 7d0:	c1 f7       	brne	.-16     	; 0x7c2 <usbPoll+0x1ca>
 7d2:	81 2f       	mov	r24, r17
 7d4:	81 50       	subi	r24, 0x01	; 1
 7d6:	90 e0       	ldi	r25, 0x00	; 0
 7d8:	01 96       	adiw	r24, 0x01	; 1
 7da:	f9 01       	movw	r30, r18
 7dc:	e8 0f       	add	r30, r24
 7de:	f9 1f       	adc	r31, r25
 7e0:	0f c0       	rjmp	.+30     	; 0x800 <usbPoll+0x208>
 7e2:	d9 01       	movw	r26, r18
 7e4:	91 2f       	mov	r25, r17
 7e6:	ed e3       	ldi	r30, 0x3D	; 61
 7e8:	f1 e0       	ldi	r31, 0x01	; 1
            }else{  /* RAM data */
                do{
                    *data++ = *r++;
 7ea:	8d 91       	ld	r24, X+
 7ec:	81 93       	st	Z+, r24
                }while(--i);
 7ee:	91 50       	subi	r25, 0x01	; 1
 7f0:	e1 f7       	brne	.-8      	; 0x7ea <usbPoll+0x1f2>
 7f2:	81 2f       	mov	r24, r17
 7f4:	81 50       	subi	r24, 0x01	; 1
 7f6:	90 e0       	ldi	r25, 0x00	; 0
 7f8:	01 96       	adiw	r24, 0x01	; 1
 7fa:	f9 01       	movw	r30, r18
 7fc:	e8 0f       	add	r30, r24
 7fe:	f9 1f       	adc	r31, r25
            }
            usbMsgPtr = r;
 800:	f0 93 57 01 	sts	0x0157, r31
 804:	e0 93 56 01 	sts	0x0156, r30
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
 808:	19 30       	cpi	r17, 0x09	; 9
 80a:	68 f4       	brcc	.+26     	; 0x826 <usbPoll+0x22e>
        usbCrc16Append(&usbTxBuf[1], len);
 80c:	8d e3       	ldi	r24, 0x3D	; 61
 80e:	91 e0       	ldi	r25, 0x01	; 1
 810:	61 2f       	mov	r22, r17
 812:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <usbCrc16Append>
        len += 4;           /* length including sync byte */
 816:	61 2f       	mov	r22, r17
 818:	6c 5f       	subi	r22, 0xFC	; 252
        if(len < 12)        /* a partial package identifies end of message */
 81a:	6c 30       	cpi	r22, 0x0C	; 12
 81c:	40 f4       	brcc	.+16     	; 0x82e <usbPoll+0x236>
            usbMsgLen = USB_NO_MSG;
 81e:	8f ef       	ldi	r24, 0xFF	; 255
 820:	80 93 23 01 	sts	0x0123, r24
 824:	04 c0       	rjmp	.+8      	; 0x82e <usbPoll+0x236>
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
        usbMsgLen = USB_NO_MSG;
 826:	8f ef       	ldi	r24, 0xFF	; 255
 828:	80 93 23 01 	sts	0x0123, r24
 82c:	6e e1       	ldi	r22, 0x1E	; 30
    }
    usbTxLen = len;
 82e:	60 93 22 01 	sts	0x0122, r22
 832:	94 e1       	ldi	r25, 0x14	; 20
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
        uchar usbLineStatus = USBIN & USBMASK;
 834:	e9 e2       	ldi	r30, 0x29	; 41
 836:	f0 e0       	ldi	r31, 0x00	; 0
 838:	80 81       	ld	r24, Z
        if(usbLineStatus != 0)  /* SE0 has ended */
 83a:	86 70       	andi	r24, 0x06	; 6
 83c:	d1 f4       	brne	.+52     	; 0x872 <usbPoll+0x27a>
    if(usbTxLen & 0x10){    /* transmit system idle */
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
 83e:	91 50       	subi	r25, 0x01	; 1
 840:	d9 f7       	brne	.-10     	; 0x838 <usbPoll+0x240>
        uchar usbLineStatus = USBIN & USBMASK;
        if(usbLineStatus != 0)  /* SE0 has ended */
            goto isNotReset;
    }
    /* RESET condition, called multiple times during reset */
    usbNewDeviceAddr = 0;
 842:	10 92 59 01 	sts	0x0159, r1
    usbDeviceAddr = 0;
 846:	10 92 53 01 	sts	0x0153, r1
 84a:	13 c0       	rjmp	.+38     	; 0x872 <usbPoll+0x27a>
uchar       len;

    wantLen = usbMsgLen;
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
 84c:	81 2f       	mov	r24, r17
 84e:	88 50       	subi	r24, 0x08	; 8
 850:	80 93 23 01 	sts	0x0123, r24
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
 854:	ec e3       	ldi	r30, 0x3C	; 60
 856:	f1 e0       	ldi	r31, 0x01	; 1
 858:	80 81       	ld	r24, Z
 85a:	98 e8       	ldi	r25, 0x88	; 136
 85c:	89 27       	eor	r24, r25
 85e:	80 83       	st	Z, r24
 860:	18 e0       	ldi	r17, 0x08	; 8
 862:	a3 cf       	rjmp	.-186    	; 0x7aa <usbPoll+0x1b2>
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
        usbCrc16Append(&usbTxBuf[1], len);
 864:	8d e3       	ldi	r24, 0x3D	; 61
 866:	91 e0       	ldi	r25, 0x01	; 1
 868:	60 e0       	ldi	r22, 0x00	; 0
 86a:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <usbCrc16Append>
 86e:	64 e0       	ldi	r22, 0x04	; 4
 870:	d6 cf       	rjmp	.-84     	; 0x81e <usbPoll+0x226>
    usbDeviceAddr = 0;
    usbResetStall();
    DBG1(0xff, 0, 0);
isNotReset:
    usbHandleResetHook(i);
}
 872:	df 91       	pop	r29
 874:	cf 91       	pop	r28
 876:	1f 91       	pop	r17
 878:	08 95       	ret

0000087a <usbSetInterrupt>:
    txStatus->len = len + 4;    /* len must be given including sync byte */
    DBG2(0x21 + (((int)txStatus >> 3) & 3), txStatus->buffer, len + 3);
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
 87a:	ff 92       	push	r15
 87c:	0f 93       	push	r16
 87e:	1f 93       	push	r17
 880:	dc 01       	movw	r26, r24
 882:	f6 2e       	mov	r15, r22

#if USB_CFG_IMPLEMENT_HALT
    if(usbTxLen1 == USBPID_STALL)
        return;
#endif
    if(txStatus->len & 0x10){   /* packet buffer was empty */
 884:	80 91 47 01 	lds	r24, 0x0147
 888:	84 ff       	sbrs	r24, 4
 88a:	07 c0       	rjmp	.+14     	; 0x89a <usbSetInterrupt+0x20>
        txStatus->buffer[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* toggle token */
 88c:	e8 e4       	ldi	r30, 0x48	; 72
 88e:	f1 e0       	ldi	r31, 0x01	; 1
 890:	80 81       	ld	r24, Z
 892:	98 e8       	ldi	r25, 0x88	; 136
 894:	89 27       	eor	r24, r25
 896:	80 83       	st	Z, r24
 898:	03 c0       	rjmp	.+6      	; 0x8a0 <usbSetInterrupt+0x26>
    }else{
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
 89a:	8a e5       	ldi	r24, 0x5A	; 90
 89c:	80 93 47 01 	sts	0x0147, r24
 8a0:	9f 2d       	mov	r25, r15
 8a2:	e9 e4       	ldi	r30, 0x49	; 73
 8a4:	f1 e0       	ldi	r31, 0x01	; 1
    }
    p = txStatus->buffer + 1;
    i = len;
    do{                         /* if len == 0, we still copy 1 byte, but that's no problem */
        *p++ = *data++;
 8a6:	8d 91       	ld	r24, X+
 8a8:	81 93       	st	Z+, r24
    }while(--i > 0);            /* loop control at the end is 2 bytes shorter than at beginning */
 8aa:	91 50       	subi	r25, 0x01	; 1
 8ac:	e1 f7       	brne	.-8      	; 0x8a6 <usbSetInterrupt+0x2c>
    usbCrc16Append(&txStatus->buffer[1], len);
 8ae:	09 e4       	ldi	r16, 0x49	; 73
 8b0:	11 e0       	ldi	r17, 0x01	; 1
 8b2:	c8 01       	movw	r24, r16
 8b4:	6f 2d       	mov	r22, r15
 8b6:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <usbCrc16Append>
    txStatus->len = len + 4;    /* len must be given including sync byte */
 8ba:	8f 2d       	mov	r24, r15
 8bc:	8c 5f       	subi	r24, 0xFC	; 252
 8be:	02 50       	subi	r16, 0x02	; 2
 8c0:	10 40       	sbci	r17, 0x00	; 0
 8c2:	f8 01       	movw	r30, r16
 8c4:	80 83       	st	Z, r24
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
    usbGenericSetInterrupt(data, len, &usbTxStatus1);
}
 8c6:	1f 91       	pop	r17
 8c8:	0f 91       	pop	r16
 8ca:	ff 90       	pop	r15
 8cc:	08 95       	ret

000008ce <usbCrc16>:
;   poly    r20+r21
;   scratch r23
;   resCrc  r24+r25 / r16+r17
;   ptr     X / Z
usbCrc16:
    mov     ptrL, argPtrL
 8ce:	a8 2f       	mov	r26, r24
    mov     ptrH, argPtrH
 8d0:	b9 2f       	mov	r27, r25
    ldi     resCrcL, 0
 8d2:	80 e0       	ldi	r24, 0x00	; 0
    ldi     resCrcH, 0
 8d4:	90 e0       	ldi	r25, 0x00	; 0
    ldi     polyL, lo8(0xa001)
 8d6:	41 e0       	ldi	r20, 0x01	; 1
    ldi     polyH, hi8(0xa001)
 8d8:	50 ea       	ldi	r21, 0xA0	; 160
    com     argLen      ; argLen = -argLen - 1: modified loop to ensure that carry is set
 8da:	60 95       	com	r22
    ldi     bitCnt, 0   ; loop counter with starnd condition = end condition
 8dc:	30 e0       	ldi	r19, 0x00	; 0
    rjmp    usbCrcLoopEntry
 8de:	09 c0       	rjmp	.+18     	; 0x8f2 <usbCrcLoopEntry>

000008e0 <usbCrcByteLoop>:
usbCrcByteLoop:
    ld      byte, ptr+
 8e0:	2d 91       	ld	r18, X+
    eor     resCrcL, byte
 8e2:	82 27       	eor	r24, r18

000008e4 <usbCrcBitLoop>:
usbCrcBitLoop:
    ror     resCrcH     ; carry is always set here (see brcs jumps to here)
 8e4:	97 95       	ror	r25
    ror     resCrcL
 8e6:	87 95       	ror	r24
    brcs    usbCrcNoXor
 8e8:	10 f0       	brcs	.+4      	; 0x8ee <usbCrcNoXor>
    eor     resCrcL, polyL
 8ea:	84 27       	eor	r24, r20
    eor     resCrcH, polyH
 8ec:	95 27       	eor	r25, r21

000008ee <usbCrcNoXor>:
usbCrcNoXor:
    subi    bitCnt, 224 ; (8 * 224) % 256 = 0; this loop iterates 8 times
 8ee:	30 5e       	subi	r19, 0xE0	; 224
    brcs    usbCrcBitLoop
 8f0:	c8 f3       	brcs	.-14     	; 0x8e4 <usbCrcBitLoop>

000008f2 <usbCrcLoopEntry>:
usbCrcLoopEntry:
    subi    argLen, -1
 8f2:	6f 5f       	subi	r22, 0xFF	; 255
    brcs    usbCrcByteLoop
 8f4:	a8 f3       	brcs	.-22     	; 0x8e0 <usbCrcByteLoop>

000008f6 <usbCrcReady>:
usbCrcReady:
    ret
 8f6:	08 95       	ret

000008f8 <usbCrc16Append>:

#endif /* USB_USE_FAST_CRC */

; extern unsigned usbCrc16Append(unsigned char *data, unsigned char len);
usbCrc16Append:
    rcall   usbCrc16
 8f8:	ea df       	rcall	.-44     	; 0x8ce <usbCrc16>
    st      ptr+, resCrcL
 8fa:	8d 93       	st	X+, r24
    st      ptr+, resCrcH
 8fc:	9d 93       	st	X+, r25
    ret
 8fe:	08 95       	ret

00000900 <__vector_1>:
; Numbers in brackets are clocks counted from center of last sync bit
; when instruction starts

USB_INTR_VECTOR:
;order of registers pushed: YL, SREG YH, [sofError], bitcnt, shift, x1, x2, x3, x4, cnt
    push    YL                  ;[-25] push only what is necessary to sync with edge ASAP
 900:	cf 93       	push	r28
    in      YL, SREG            ;[-23]
 902:	cf b7       	in	r28, 0x3f	; 63
    push    YL                  ;[-22]
 904:	cf 93       	push	r28
    push    YH                  ;[-20]
 906:	df 93       	push	r29

00000908 <waitForJ>:
;sync up with J to K edge during sync pattern -- use fastest possible loops
;The first part waits at most 1 bit long since we must be in sync pattern.
;YL is guarenteed to be < 0x80 because I flag is clear. When we jump to
;waitForJ, ensure that this prerequisite is met.
waitForJ:
    inc     YL
 908:	c3 95       	inc	r28
    sbis    USBIN, USBMINUS
 90a:	49 9b       	sbis	0x09, 1	; 9
    brne    waitForJ        ; just make sure we have ANY timeout
 90c:	e9 f7       	brne	.-6      	; 0x908 <waitForJ>

0000090e <waitForK>:
waitForK:
;The following code results in a sampling window of < 1/4 bit which meets the spec.
    sbis    USBIN, USBMINUS     ;[-15]
 90e:	49 9b       	sbis	0x09, 1	; 9
    rjmp    foundK              ;[-14]
 910:	0b c0       	rjmp	.+22     	; 0x928 <foundK>
    sbis    USBIN, USBMINUS
 912:	49 9b       	sbis	0x09, 1	; 9
    rjmp    foundK
 914:	09 c0       	rjmp	.+18     	; 0x928 <foundK>
    sbis    USBIN, USBMINUS
 916:	49 9b       	sbis	0x09, 1	; 9
    rjmp    foundK
 918:	07 c0       	rjmp	.+14     	; 0x928 <foundK>
    sbis    USBIN, USBMINUS
 91a:	49 9b       	sbis	0x09, 1	; 9
    rjmp    foundK
 91c:	05 c0       	rjmp	.+10     	; 0x928 <foundK>
    sbis    USBIN, USBMINUS
 91e:	49 9b       	sbis	0x09, 1	; 9
    rjmp    foundK
 920:	03 c0       	rjmp	.+6      	; 0x928 <foundK>
    sbis    USBIN, USBMINUS
 922:	49 9b       	sbis	0x09, 1	; 9
    rjmp    foundK
 924:	01 c0       	rjmp	.+2      	; 0x928 <foundK>
    sts     usbSofCount, YL
#endif  /* USB_COUNT_SOF */
#ifdef USB_SOF_HOOK
    USB_SOF_HOOK
#endif
    rjmp    sofError
 926:	8b c0       	rjmp	.+278    	; 0xa3e <sofError>

00000928 <foundK>:
foundK:                         ;[-12]
;{3, 5} after falling D- edge, average delay: 4 cycles [we want 5 for center sampling]
;we have 1 bit time for setup purposes, then sample again. Numbers in brackets
;are cycles from center of first sync (double K) bit after the instruction
    push    bitcnt              ;[-12]
 928:	6f 93       	push	r22
;   [---]                       ;[-11]
    lds     YL, usbInputBufOffset;[-10]
 92a:	c0 91 55 01 	lds	r28, 0x0155
;   [---]                       ;[-9]
    clr     YH                  ;[-8]
 92e:	dd 27       	eor	r29, r29
    subi    YL, lo8(-(usbRxBuf));[-7] [rx loop init]
 930:	c4 5a       	subi	r28, 0xA4	; 164
    sbci    YH, hi8(-(usbRxBuf));[-6] [rx loop init]
 932:	de 4f       	sbci	r29, 0xFE	; 254
    push    shift               ;[-5]
 934:	2f 93       	push	r18
;   [---]                       ;[-4]
    ldi     bitcnt, 0x55        ;[-3] [rx loop init]
 936:	65 e5       	ldi	r22, 0x55	; 85
    sbis    USBIN, USBMINUS     ;[-2] we want two bits K (sample 2 cycles too early)
 938:	49 9b       	sbis	0x09, 1	; 9
    rjmp    haveTwoBitsK        ;[-1]
 93a:	03 c0       	rjmp	.+6      	; 0x942 <haveTwoBitsK>
    pop     shift               ;[0] undo the push from before
 93c:	2f 91       	pop	r18
    pop     bitcnt              ;[2] undo the push from before
 93e:	6f 91       	pop	r22
    rjmp    waitForK            ;[4] this was not the end of sync, retry
 940:	e6 cf       	rjmp	.-52     	; 0x90e <waitForK>

00000942 <haveTwoBitsK>:

;----------------------------------------------------------------------------
; push more registers and initialize values while we sample the first bits:
;----------------------------------------------------------------------------
haveTwoBitsK:
    push    x1              ;[1]
 942:	0f 93       	push	r16
    push    x2              ;[3]
 944:	1f 93       	push	r17
    push    x3              ;[5]
 946:	4f 93       	push	r20
    ldi     shift, 0        ;[7]
 948:	20 e0       	ldi	r18, 0x00	; 0
    ldi     x3, 1<<4        ;[8] [rx loop init] first sample is inverse bit, compensate that
 94a:	40 e1       	ldi	r20, 0x10	; 16
    push    x4              ;[9] == leap
 94c:	5f 93       	push	r21

    in      x1, USBIN       ;[11] <-- sample bit 0
 94e:	09 b1       	in	r16, 0x09	; 9
    andi    x1, USBMASK     ;[12]
 950:	06 70       	andi	r16, 0x06	; 6
    bst     x1, USBMINUS    ;[13]
 952:	01 fb       	bst	r16, 1
    bld     shift, 7        ;[14]
 954:	27 f9       	bld	r18, 7
    push    cnt             ;[15]
 956:	3f 93       	push	r19
    ldi     leap, 0         ;[17] [rx loop init]
 958:	50 e0       	ldi	r21, 0x00	; 0
    ldi     cnt, USB_BUFSIZE;[18] [rx loop init]
 95a:	3b e0       	ldi	r19, 0x0B	; 11
    rjmp    rxbit1          ;[19] arrives at [21]
 95c:	39 c0       	rjmp	.+114    	; 0x9d0 <rxbit1>

0000095e <unstuff6>:

; duration of unstuffing code should be 10.66666667 cycles. We adjust "leap"
; accordingly to approximate this value in the long run.

unstuff6:
    andi    x2, USBMASK ;[03]
 95e:	16 70       	andi	r17, 0x06	; 6
    ori     x3, 1<<6    ;[04] will not be shifted any more
 960:	40 64       	ori	r20, 0x40	; 64
    andi    shift, ~0x80;[05]
 962:	2f 77       	andi	r18, 0x7F	; 127
    mov     x1, x2      ;[06] sampled bit 7 is actually re-sampled bit 6
 964:	01 2f       	mov	r16, r17
    subi    leap, -1    ;[07] total duration = 11 bits -> subtract 1/3
 966:	5f 5f       	subi	r21, 0xFF	; 255
    rjmp    didUnstuff6 ;[08]
 968:	1e c0       	rjmp	.+60     	; 0x9a6 <didUnstuff6>

0000096a <unstuff7>:

unstuff7:
    ori     x3, 1<<7    ;[09] will not be shifted any more
 96a:	40 68       	ori	r20, 0x80	; 128
    in      x2, USBIN   ;[00] [10]  re-sample bit 7
 96c:	19 b1       	in	r17, 0x09	; 9
    andi    x2, USBMASK ;[01]
 96e:	16 70       	andi	r17, 0x06	; 6
    andi    shift, ~0x80;[02]
 970:	2f 77       	andi	r18, 0x7F	; 127
    subi    leap, 2     ;[03] total duration = 10 bits -> add 1/3
 972:	52 50       	subi	r21, 0x02	; 2
    rjmp    didUnstuff7 ;[04]
 974:	1f c0       	rjmp	.+62     	; 0x9b4 <didUnstuff7>

00000976 <unstuffEven>:

unstuffEven:
    ori     x3, 1<<6    ;[09] will be shifted right 6 times for bit 0
 976:	40 64       	ori	r20, 0x40	; 64
    in      x1, USBIN   ;[00] [10]
 978:	09 b1       	in	r16, 0x09	; 9
    andi    shift, ~0x80;[01]
 97a:	2f 77       	andi	r18, 0x7F	; 127
    andi    x1, USBMASK ;[02]
 97c:	06 70       	andi	r16, 0x06	; 6
    breq    se0         ;[03]
 97e:	d1 f1       	breq	.+116    	; 0x9f4 <se0>
    subi    leap, -1    ;[04] total duration = 11 bits -> subtract 1/3
 980:	5f 5f       	subi	r21, 0xFF	; 255
    nop2                ;[05]
 982:	00 c0       	rjmp	.+0      	; 0x984 <unstuffEven+0xe>
    rjmp    didUnstuffE ;[06]
 984:	23 c0       	rjmp	.+70     	; 0x9cc <didUnstuffE>

00000986 <unstuffOdd>:

unstuffOdd:
    ori     x3, 1<<5    ;[09] will be shifted right 4 times for bit 1
 986:	40 62       	ori	r20, 0x20	; 32
    in      x2, USBIN   ;[00] [10]
 988:	19 b1       	in	r17, 0x09	; 9
    andi    shift, ~0x80;[01]
 98a:	2f 77       	andi	r18, 0x7F	; 127
    andi    x2, USBMASK ;[02]
 98c:	16 70       	andi	r17, 0x06	; 6
    breq    se0         ;[03]
 98e:	91 f1       	breq	.+100    	; 0x9f4 <se0>
    subi    leap, -1    ;[04] total duration = 11 bits -> subtract 1/3
 990:	5f 5f       	subi	r21, 0xFF	; 255
    nop2                ;[05]
 992:	00 c0       	rjmp	.+0      	; 0x994 <unstuffOdd+0xe>
    rjmp    didUnstuffO ;[06]
 994:	25 c0       	rjmp	.+74     	; 0x9e0 <didUnstuffO>

00000996 <rxByteLoop>:

rxByteLoop:
    andi    x1, USBMASK ;[03]
 996:	06 70       	andi	r16, 0x06	; 6
    eor     x2, x1      ;[04]
 998:	10 27       	eor	r17, r16
    subi    leap, 1     ;[05]
 99a:	51 50       	subi	r21, 0x01	; 1
    brpl    skipLeap    ;[06]
 99c:	12 f4       	brpl	.+4      	; 0x9a2 <skipLeap>
    subi    leap, -3    ;1 one leap cycle every 3rd byte -> 85 + 1/3 cycles per byte
 99e:	5d 5f       	subi	r21, 0xFD	; 253
	...

000009a2 <skipLeap>:
    nop                 ;1
skipLeap:
    subi    x2, 1       ;[08]
 9a2:	11 50       	subi	r17, 0x01	; 1
    ror     shift       ;[09]
 9a4:	27 95       	ror	r18

000009a6 <didUnstuff6>:
didUnstuff6:
    cpi     shift, 0xfc ;[10]
 9a6:	2c 3f       	cpi	r18, 0xFC	; 252
    in      x2, USBIN   ;[00] [11] <-- sample bit 7
 9a8:	19 b1       	in	r17, 0x09	; 9
    brcc    unstuff6    ;[01]
 9aa:	c8 f6       	brcc	.-78     	; 0x95e <unstuff6>
    andi    x2, USBMASK ;[02]
 9ac:	16 70       	andi	r17, 0x06	; 6
    eor     x1, x2      ;[03]
 9ae:	01 27       	eor	r16, r17
    subi    x1, 1       ;[04]
 9b0:	01 50       	subi	r16, 0x01	; 1
    ror     shift       ;[05]
 9b2:	27 95       	ror	r18

000009b4 <didUnstuff7>:
didUnstuff7:
    cpi     shift, 0xfc ;[06]
 9b4:	2c 3f       	cpi	r18, 0xFC	; 252
    brcc    unstuff7    ;[07]
 9b6:	c8 f6       	brcc	.-78     	; 0x96a <unstuff7>
    eor     x3, shift   ;[08] reconstruct: x3 is 1 at bit locations we changed, 0 at others
 9b8:	42 27       	eor	r20, r18
    st      y+, x3      ;[09] store data
 9ba:	49 93       	st	Y+, r20

000009bc <rxBitLoop>:
rxBitLoop:
    in      x1, USBIN   ;[00] [11] <-- sample bit 0/2/4
 9bc:	09 b1       	in	r16, 0x09	; 9
    andi    x1, USBMASK ;[01]
 9be:	06 70       	andi	r16, 0x06	; 6
    eor     x2, x1      ;[02]
 9c0:	10 27       	eor	r17, r16
    andi    x3, 0x3f    ;[03] topmost two bits reserved for 6 and 7
 9c2:	4f 73       	andi	r20, 0x3F	; 63
    subi    x2, 1       ;[04]
 9c4:	11 50       	subi	r17, 0x01	; 1
    ror     shift       ;[05]
 9c6:	27 95       	ror	r18
    cpi     shift, 0xfc ;[06]
 9c8:	2c 3f       	cpi	r18, 0xFC	; 252
    brcc    unstuffEven ;[07]
 9ca:	a8 f6       	brcc	.-86     	; 0x976 <unstuffEven>

000009cc <didUnstuffE>:
didUnstuffE:
    lsr     x3          ;[08]
 9cc:	46 95       	lsr	r20
    lsr     x3          ;[09]
 9ce:	46 95       	lsr	r20

000009d0 <rxbit1>:
rxbit1:
    in      x2, USBIN   ;[00] [10] <-- sample bit 1/3/5
 9d0:	19 b1       	in	r17, 0x09	; 9
    andi    x2, USBMASK ;[01]
 9d2:	16 70       	andi	r17, 0x06	; 6
    breq    se0         ;[02]
 9d4:	79 f0       	breq	.+30     	; 0x9f4 <se0>
    eor     x1, x2      ;[03]
 9d6:	01 27       	eor	r16, r17
    subi    x1, 1       ;[04]
 9d8:	01 50       	subi	r16, 0x01	; 1
    ror     shift       ;[05]
 9da:	27 95       	ror	r18
    cpi     shift, 0xfc ;[06]
 9dc:	2c 3f       	cpi	r18, 0xFC	; 252
    brcc    unstuffOdd  ;[07]
 9de:	98 f6       	brcc	.-90     	; 0x986 <unstuffOdd>

000009e0 <didUnstuffO>:
didUnstuffO:
    subi    bitcnt, 0xab;[08] == addi 0x55, 0x55 = 0x100/3
 9e0:	6b 5a       	subi	r22, 0xAB	; 171
    brcs    rxBitLoop   ;[09]
 9e2:	60 f3       	brcs	.-40     	; 0x9bc <rxBitLoop>

    subi    cnt, 1      ;[10]
 9e4:	31 50       	subi	r19, 0x01	; 1
    in      x1, USBIN   ;[00] [11] <-- sample bit 6
 9e6:	09 b1       	in	r16, 0x09	; 9
    brcc    rxByteLoop  ;[01]
 9e8:	b0 f6       	brcc	.-84     	; 0x996 <rxByteLoop>
    rjmp    overflow
 9ea:	00 c0       	rjmp	.+0      	; 0x9ec <overflow>

000009ec <overflow>:
*/

#define token   x1

overflow:
    ldi     x2, 1<<USB_INTR_PENDING_BIT
 9ec:	11 e0       	ldi	r17, 0x01	; 1
    USB_STORE_PENDING(x2)       ; clear any pending interrupts
 9ee:	1c bb       	out	0x1c, r17	; 28

000009f0 <ignorePacket>:
ignorePacket:
    clr     token
 9f0:	00 27       	eor	r16, r16
    rjmp    storeTokenAndReturn
 9f2:	19 c0       	rjmp	.+50     	; 0xa26 <handleSetupOrOut>

000009f4 <se0>:
; Processing of received packet (numbers in brackets are cycles after center of SE0)
;----------------------------------------------------------------------------
;This is the only non-error exit point for the software receiver loop
;we don't check any CRCs here because there is no time left.
se0:
    subi    cnt, USB_BUFSIZE    ;[5]
 9f4:	3b 50       	subi	r19, 0x0B	; 11
    neg     cnt                 ;[6]
 9f6:	31 95       	neg	r19
    sub     YL, cnt             ;[7]
 9f8:	c3 1b       	sub	r28, r19
    sbci    YH, 0               ;[8]
 9fa:	d0 40       	sbci	r29, 0x00	; 0
    ldi     x2, 1<<USB_INTR_PENDING_BIT ;[9]
 9fc:	11 e0       	ldi	r17, 0x01	; 1
    USB_STORE_PENDING(x2)       ;[10] clear pending intr and check flag later. SE0 should be over.
 9fe:	1c bb       	out	0x1c, r17	; 28
    ld      token, y            ;[11]
 a00:	08 81       	ld	r16, Y
    cpi     token, USBPID_DATA0 ;[13]
 a02:	03 3c       	cpi	r16, 0xC3	; 195
    breq    handleData          ;[14]
 a04:	09 f1       	breq	.+66     	; 0xa48 <handleData>
    cpi     token, USBPID_DATA1 ;[15]
 a06:	0b 34       	cpi	r16, 0x4B	; 75
    breq    handleData          ;[16]
 a08:	f9 f0       	breq	.+62     	; 0xa48 <handleData>
    lds     shift, usbDeviceAddr;[17]
 a0a:	20 91 53 01 	lds	r18, 0x0153
    ldd     x2, y+1             ;[19] ADDR and 1 bit endpoint number
 a0e:	19 81       	ldd	r17, Y+1	; 0x01
    lsl     x2                  ;[21] shift out 1 bit endpoint number
 a10:	11 0f       	add	r17, r17
    cpse    x2, shift           ;[22]
 a12:	12 13       	cpse	r17, r18
    rjmp    ignorePacket        ;[23]
 a14:	ed cf       	rjmp	.-38     	; 0x9f0 <ignorePacket>
/* only compute endpoint number in x3 if required later */
#if USB_CFG_HAVE_INTRIN_ENDPOINT || USB_CFG_IMPLEMENT_FN_WRITEOUT
    ldd     x3, y+2             ;[24] endpoint number + crc
 a16:	4a 81       	ldd	r20, Y+2	; 0x02
    rol     x3                  ;[26] shift in LSB of endpoint
 a18:	44 1f       	adc	r20, r20
#endif
    cpi     token, USBPID_IN    ;[27]
 a1a:	09 36       	cpi	r16, 0x69	; 105
    breq    handleIn            ;[28]
 a1c:	51 f1       	breq	.+84     	; 0xa72 <handleIn>
    cpi     token, USBPID_SETUP ;[29]
 a1e:	0d 32       	cpi	r16, 0x2D	; 45
    breq    handleSetupOrOut    ;[30]
 a20:	11 f0       	breq	.+4      	; 0xa26 <handleSetupOrOut>
    cpi     token, USBPID_OUT   ;[31]
 a22:	01 3e       	cpi	r16, 0xE1	; 225
    brne    ignorePacket        ;[32] must be ack, nak or whatever
 a24:	29 f7       	brne	.-54     	; 0x9f0 <ignorePacket>

00000a26 <handleSetupOrOut>:
    andi    x3, 0xf             ;[32]
    breq    storeTokenAndReturn ;[33]
    mov     token, x3           ;[34] indicate that this is endpoint x OUT
#endif
storeTokenAndReturn:
    sts     usbCurrentTok, token;[35]
 a26:	00 93 5a 01 	sts	0x015A, r16

00000a2a <doReturn>:
doReturn:
    POP_STANDARD                ;[37] 12...16 cycles
 a2a:	3f 91       	pop	r19
 a2c:	5f 91       	pop	r21
 a2e:	4f 91       	pop	r20
 a30:	1f 91       	pop	r17
 a32:	0f 91       	pop	r16
 a34:	2f 91       	pop	r18
 a36:	6f 91       	pop	r22
    USB_LOAD_PENDING(YL)        ;[49]
 a38:	cc b3       	in	r28, 0x1c	; 28
    sbrc    YL, USB_INTR_PENDING_BIT;[50] check whether data is already arriving
 a3a:	c0 fd       	sbrc	r28, 0
    rjmp    waitForJ            ;[51] save the pops and pushes -- a new interrupt is already pending
 a3c:	65 cf       	rjmp	.-310    	; 0x908 <waitForJ>

00000a3e <sofError>:
sofError:
    POP_RETI                    ;macro call
 a3e:	df 91       	pop	r29
 a40:	cf 91       	pop	r28
 a42:	cf bf       	out	0x3f, r28	; 63
 a44:	cf 91       	pop	r28
    reti
 a46:	18 95       	reti

00000a48 <handleData>:

handleData:
#if USB_CFG_CHECK_CRC
    CRC_CLEANUP_AND_CHECK       ; jumps to ignorePacket if CRC error
#endif
    lds     shift, usbCurrentTok;[18]
 a48:	20 91 5a 01 	lds	r18, 0x015A
    tst     shift               ;[20]
 a4c:	22 23       	and	r18, r18
    breq    doReturn            ;[21]
 a4e:	69 f3       	breq	.-38     	; 0xa2a <doReturn>
    lds     x2, usbRxLen        ;[22]
 a50:	10 91 58 01 	lds	r17, 0x0158
    tst     x2                  ;[24]
 a54:	11 23       	and	r17, r17
    brne    sendNakAndReti      ;[25]
 a56:	91 f5       	brne	.+100    	; 0xabc <sendNakAndReti>
; 2006-03-11: The following two lines fix a problem where the device was not
; recognized if usbPoll() was called less frequently than once every 4 ms.
    cpi     cnt, 4              ;[26] zero sized data packets are status phase only -- ignore and ack
 a58:	34 30       	cpi	r19, 0x04	; 4
    brmi    sendAckAndReti      ;[27] keep rx buffer clean -- we must not NAK next SETUP
 a5a:	92 f1       	brmi	.+100    	; 0xac0 <sendAckAndReti>
#if USB_CFG_CHECK_DATA_TOGGLING
    sts     usbCurrentDataToken, token  ; store for checking by C code
#endif
    sts     usbRxLen, cnt       ;[28] store received data, swap buffers
 a5c:	30 93 58 01 	sts	0x0158, r19
    sts     usbRxToken, shift   ;[30]
 a60:	20 93 54 01 	sts	0x0154, r18
    lds     x2, usbInputBufOffset;[32] swap buffers
 a64:	10 91 55 01 	lds	r17, 0x0155
    ldi     cnt, USB_BUFSIZE    ;[34]
 a68:	3b e0       	ldi	r19, 0x0B	; 11
    sub     cnt, x2             ;[35]
 a6a:	31 1b       	sub	r19, r17
    sts     usbInputBufOffset, cnt;[36] buffers now swapped
 a6c:	30 93 55 01 	sts	0x0155, r19
    rjmp    sendAckAndReti      ;[38] 40 + 17 = 57 until SOP
 a70:	27 c0       	rjmp	.+78     	; 0xac0 <sendAckAndReti>

00000a72 <handleIn>:

handleIn:
;We don't send any data as long as the C code has not processed the current
;input data and potentially updated the output data. That's more efficient
;in terms of code size than clearing the tx buffers when a packet is received.
    lds     x1, usbRxLen        ;[30]
 a72:	00 91 58 01 	lds	r16, 0x0158
    cpi     x1, 1               ;[32] negative values are flow control, 0 means "buffer free"
 a76:	01 30       	cpi	r16, 0x01	; 1
    brge    sendNakAndReti      ;[33] unprocessed input packet?
 a78:	0c f5       	brge	.+66     	; 0xabc <sendNakAndReti>
    ldi     x1, USBPID_NAK      ;[34] prepare value for usbTxLen
 a7a:	0a e5       	ldi	r16, 0x5A	; 90
#if USB_CFG_HAVE_INTRIN_ENDPOINT
    andi    x3, 0xf             ;[35] x3 contains endpoint
 a7c:	4f 70       	andi	r20, 0x0F	; 15
#if USB_CFG_SUPPRESS_INTR_CODE
    brne    sendNakAndReti      ;[36]
#else
    brne    handleIn1           ;[36]
 a7e:	49 f4       	brne	.+18     	; 0xa92 <handleIn1>
#endif
#endif
    lds     cnt, usbTxLen       ;[37]
 a80:	30 91 22 01 	lds	r19, 0x0122
    sbrc    cnt, 4              ;[39] all handshake tokens have bit 4 set
 a84:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[40] 42 + 16 = 58 until SOP
 a86:	1d c0       	rjmp	.+58     	; 0xac2 <sendCntAndReti>
    sts     usbTxLen, x1        ;[41] x1 == USBPID_NAK from above
 a88:	00 93 22 01 	sts	0x0122, r16
    ldi     YL, lo8(usbTxBuf)   ;[43]
 a8c:	cc e3       	ldi	r28, 0x3C	; 60
    ldi     YH, hi8(usbTxBuf)   ;[44]
 a8e:	d1 e0       	ldi	r29, 0x01	; 1
    rjmp    usbSendAndReti      ;[45] 57 + 12 = 59 until SOP
 a90:	1c c0       	rjmp	.+56     	; 0xaca <usbSendAndReti>

00000a92 <handleIn1>:
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
; 2006-06-10 as suggested by O.Tamura: support second INTR IN / BULK IN endpoint
    cpi     x3, USB_CFG_EP3_NUMBER;[38]
    breq    handleIn3           ;[39]
#endif
    lds     cnt, usbTxLen1      ;[40]
 a92:	30 91 47 01 	lds	r19, 0x0147
    sbrc    cnt, 4              ;[42] all handshake tokens have bit 4 set
 a96:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[43] 47 + 16 = 63 until SOP
 a98:	14 c0       	rjmp	.+40     	; 0xac2 <sendCntAndReti>
    sts     usbTxLen1, x1       ;[44] x1 == USBPID_NAK from above
 a9a:	00 93 47 01 	sts	0x0147, r16
    ldi     YL, lo8(usbTxBuf1)  ;[46]
 a9e:	c8 e4       	ldi	r28, 0x48	; 72
    ldi     YH, hi8(usbTxBuf1)  ;[47]
 aa0:	d1 e0       	ldi	r29, 0x01	; 1
    rjmp    usbSendAndReti      ;[48] 50 + 12 = 62 until SOP
 aa2:	13 c0       	rjmp	.+38     	; 0xaca <usbSendAndReti>

00000aa4 <bitstuffN>:
; J = (D+ = 0), (D- = 1)
; K = (D+ = 1), (D- = 0)
; Spec allows 7.5 bit times from EOP to SOP for replies

bitstuffN:
    eor     x1, x4          ;[5]
 aa4:	05 27       	eor	r16, r21
    ldi     x2, 0           ;[6]
 aa6:	10 e0       	ldi	r17, 0x00	; 0
    nop2                    ;[7]
 aa8:	00 c0       	rjmp	.+0      	; 0xaaa <bitstuffN+0x6>
    nop                     ;[9]
 aaa:	00 00       	nop
    out     USBOUT, x1      ;[10] <-- out
 aac:	0b b9       	out	0x0b, r16	; 11
    rjmp    didStuffN       ;[0]
 aae:	1a c0       	rjmp	.+52     	; 0xae4 <didStuffN>

00000ab0 <bitstuff6>:
    
bitstuff6:
    eor     x1, x4          ;[5]
 ab0:	05 27       	eor	r16, r21
    ldi     x2, 0           ;[6] Carry is zero due to brcc
 ab2:	10 e0       	ldi	r17, 0x00	; 0
    rol     shift           ;[7] compensate for ror shift at branch destination
 ab4:	22 1f       	adc	r18, r18
    rjmp    didStuff6       ;[8]
 ab6:	1d c0       	rjmp	.+58     	; 0xaf2 <didStuff6>

00000ab8 <bitstuff7>:

bitstuff7:
    ldi     x2, 0           ;[2] Carry is zero due to brcc
 ab8:	10 e0       	ldi	r17, 0x00	; 0
    rjmp    didStuff7       ;[3]
 aba:	21 c0       	rjmp	.+66     	; 0xafe <didStuff7>

00000abc <sendNakAndReti>:


sendNakAndReti:
    ldi     x3, USBPID_NAK  ;[-18]
 abc:	4a e5       	ldi	r20, 0x5A	; 90
    rjmp    sendX3AndReti   ;[-17]
 abe:	02 c0       	rjmp	.+4      	; 0xac4 <sendX3AndReti>

00000ac0 <sendAckAndReti>:
sendAckAndReti:
    ldi     cnt, USBPID_ACK ;[-17]
 ac0:	32 ed       	ldi	r19, 0xD2	; 210

00000ac2 <sendCntAndReti>:
sendCntAndReti:
    mov     x3, cnt         ;[-16]
 ac2:	43 2f       	mov	r20, r19

00000ac4 <sendX3AndReti>:
sendX3AndReti:
    ldi     YL, 20          ;[-15] x3==r20 address is 20
 ac4:	c4 e1       	ldi	r28, 0x14	; 20
    ldi     YH, 0           ;[-14]
 ac6:	d0 e0       	ldi	r29, 0x00	; 0
    ldi     cnt, 2          ;[-13]
 ac8:	32 e0       	ldi	r19, 0x02	; 2

00000aca <usbSendAndReti>:
;uses: x1...x4, btcnt, shift, cnt, Y
;Numbers in brackets are time since first bit of sync pattern is sent
;We don't match the transfer rate exactly (don't insert leap cycles every third
;byte) because the spec demands only 1.5% precision anyway.
usbSendAndReti:             ; 12 cycles until SOP
    in      x2, USBDDR      ;[-12]
 aca:	1a b1       	in	r17, 0x0a	; 10
    ori     x2, USBMASK     ;[-11]
 acc:	16 60       	ori	r17, 0x06	; 6
    sbi     USBOUT, USBMINUS;[-10] prepare idle state; D+ and D- must have been 0 (no pullups)
 ace:	59 9a       	sbi	0x0b, 1	; 11
    in      x1, USBOUT      ;[-8] port mirror for tx loop
 ad0:	0b b1       	in	r16, 0x0b	; 11
    out     USBDDR, x2      ;[-7] <- acquire bus
 ad2:	1a b9       	out	0x0a, r17	; 10
; need not init x2 (bitstuff history) because sync starts with 0
    ldi     x4, USBMASK     ;[-6] exor mask
 ad4:	56 e0       	ldi	r21, 0x06	; 6
    ldi     shift, 0x80     ;[-5] sync byte is first byte sent
 ad6:	20 e8       	ldi	r18, 0x80	; 128

00000ad8 <txByteLoop>:
txByteLoop:
    ldi     bitcnt, 0x35    ;[-4] [6] binary 0011 0101
 ad8:	65 e3       	ldi	r22, 0x35	; 53

00000ada <txBitLoop>:
txBitLoop:
    sbrs    shift, 0        ;[-3] [7]
 ada:	20 ff       	sbrs	r18, 0
    eor     x1, x4          ;[-2] [8]
 adc:	05 27       	eor	r16, r21
    out     USBOUT, x1      ;[-1] [9] <-- out N
 ade:	0b b9       	out	0x0b, r16	; 11
    ror     shift           ;[0] [10]
 ae0:	27 95       	ror	r18
    ror     x2              ;[1]
 ae2:	17 95       	ror	r17

00000ae4 <didStuffN>:
didStuffN:
    cpi     x2, 0xfc        ;[2]
 ae4:	1c 3f       	cpi	r17, 0xFC	; 252
    brcc    bitstuffN       ;[3]
 ae6:	f0 f6       	brcc	.-68     	; 0xaa4 <bitstuffN>
    lsr     bitcnt          ;[4]
 ae8:	66 95       	lsr	r22
    brcc    txBitLoop       ;[5]
 aea:	b8 f7       	brcc	.-18     	; 0xada <txBitLoop>
    brne    txBitLoop       ;[6]
 aec:	b1 f7       	brne	.-20     	; 0xada <txBitLoop>

    sbrs    shift, 0        ;[7]
 aee:	20 ff       	sbrs	r18, 0
    eor     x1, x4          ;[8]
 af0:	05 27       	eor	r16, r21

00000af2 <didStuff6>:
didStuff6:
    out     USBOUT, x1      ;[-1] [9] <-- out 6
 af2:	0b b9       	out	0x0b, r16	; 11
    ror     shift           ;[0] [10]
 af4:	27 95       	ror	r18
    ror     x2              ;[1]
 af6:	17 95       	ror	r17
    cpi     x2, 0xfc        ;[2]
 af8:	1c 3f       	cpi	r17, 0xFC	; 252
    brcc    bitstuff6       ;[3]
 afa:	d0 f6       	brcc	.-76     	; 0xab0 <bitstuff6>
    ror     shift           ;[4]
 afc:	27 95       	ror	r18

00000afe <didStuff7>:
didStuff7:
    ror     x2              ;[5]
 afe:	17 95       	ror	r17
    sbrs    x2, 7           ;[6]
 b00:	17 ff       	sbrs	r17, 7
    eor     x1, x4          ;[7]
 b02:	05 27       	eor	r16, r21
    nop                     ;[8]
 b04:	00 00       	nop
    cpi     x2, 0xfc        ;[9]
 b06:	1c 3f       	cpi	r17, 0xFC	; 252
    out     USBOUT, x1      ;[-1][10] <-- out 7
 b08:	0b b9       	out	0x0b, r16	; 11
    brcc    bitstuff7       ;[0] [11]
 b0a:	b0 f6       	brcc	.-84     	; 0xab8 <bitstuff7>
    ld      shift, y+       ;[1]
 b0c:	29 91       	ld	r18, Y+
    dec     cnt             ;[3]
 b0e:	3a 95       	dec	r19
    brne    txByteLoop      ;[4]
 b10:	19 f7       	brne	.-58     	; 0xad8 <txByteLoop>
;make SE0:
    cbr     x1, USBMASK     ;[5] prepare SE0 [spec says EOP may be 21 to 25 cycles]
 b12:	09 7f       	andi	r16, 0xF9	; 249
    lds     x2, usbNewDeviceAddr;[6]
 b14:	10 91 59 01 	lds	r17, 0x0159
    lsl     x2              ;[8] we compare with left shifted address
 b18:	11 0f       	add	r17, r17
    subi    YL, 20 + 2      ;[9] Only assign address on data packets, not ACK/NAK in x3
 b1a:	c6 51       	subi	r28, 0x16	; 22
    sbci    YH, 0           ;[10]
 b1c:	d0 40       	sbci	r29, 0x00	; 0
    out     USBOUT, x1      ;[11] <-- out SE0 -- from now 2 bits = 22 cycles until bus idle
 b1e:	0b b9       	out	0x0b, r16	; 11
;2006-03-06: moved transfer of new address to usbDeviceAddr from C-Code to asm:
;set address only after data packet was sent, not after handshake
    breq    skipAddrAssign  ;[0]
 b20:	11 f0       	breq	.+4      	; 0xb26 <skipAddrAssign>
    sts     usbDeviceAddr, x2; if not skipped: SE0 is one cycle longer
 b22:	10 93 53 01 	sts	0x0153, r17

00000b26 <skipAddrAssign>:
skipAddrAssign:
;end of usbDeviceAddress transfer
    ldi     x2, 1<<USB_INTR_PENDING_BIT;[2] int0 occurred during TX -- clear pending flag
 b26:	11 e0       	ldi	r17, 0x01	; 1
    USB_STORE_PENDING(x2)   ;[3]
 b28:	1c bb       	out	0x1c, r17	; 28
    ori     x1, USBIDLE     ;[4]
 b2a:	02 60       	ori	r16, 0x02	; 2
    in      x2, USBDDR      ;[5]
 b2c:	1a b1       	in	r17, 0x0a	; 10
    cbr     x2, USBMASK     ;[6] set both pins to input
 b2e:	19 7f       	andi	r17, 0xF9	; 249
    mov     x3, x1          ;[7]
 b30:	40 2f       	mov	r20, r16
    cbr     x3, USBMASK     ;[8] configure no pullup on both pins
 b32:	49 7f       	andi	r20, 0xF9	; 249
    ldi     x4, 4           ;[9]
 b34:	54 e0       	ldi	r21, 0x04	; 4

00000b36 <se0Delay>:
se0Delay:
    dec     x4              ;[10] [13] [16] [19]
 b36:	5a 95       	dec	r21
    brne    se0Delay        ;[11] [14] [17] [20]
 b38:	f1 f7       	brne	.-4      	; 0xb36 <se0Delay>
    out     USBOUT, x1      ;[21] <-- out J (idle) -- end of SE0 (EOP signal)
 b3a:	0b b9       	out	0x0b, r16	; 11
    out     USBDDR, x2      ;[22] <-- release bus now
 b3c:	1a b9       	out	0x0a, r17	; 10
    out     USBOUT, x3      ;[23] <-- ensure no pull-up resistors are active
 b3e:	4b b9       	out	0x0b, r20	; 11
    rjmp    doReturn
 b40:	74 cf       	rjmp	.-280    	; 0xa2a <doReturn>

00000b42 <_exit>:
 b42:	f8 94       	cli

00000b44 <__stop_program>:
 b44:	ff cf       	rjmp	.-2      	; 0xb44 <__stop_program>
